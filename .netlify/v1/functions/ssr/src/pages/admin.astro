---
import { db } from '../firebase';
import { collection, query, getDocs, orderBy, deleteDoc, doc, updateDoc, where } from 'firebase/firestore';
import { format, parseISO, startOfDay, endOfDay } from 'date-fns';
import Layout from '../layouts/Layout.astro';

let workouts = [];
const queryDate = Astro.url.searchParams.get('date');
let selectedDate = queryDate ? new Date(queryDate) : new Date();

async function loadWorkouts(date) {
    try {
        const startDate = startOfDay(date);
        const endDate = endOfDay(date);
        
        const workoutsQuery = query(
            collection(db, "workouts"),
            where("date", ">=", format(startDate, 'yyyy-MM-dd')),
            where("date", "<=", format(endDate, 'yyyy-MM-dd')),
            orderBy("date", "asc"),
            orderBy("id", "asc")
        );

        const querySnapshot = await getDocs(workoutsQuery);
        workouts = [];

        querySnapshot.forEach((doc) => {
            const data = doc.data();
            workouts.push({
                id: doc.id,
                ...data,
                date: parseISO(data.date)
            });
        });

        console.log('Entrenamientos cargados:', workouts);
    } catch (error) {
        console.error('Error cargando entrenamientos:', error);
    }
}

await loadWorkouts(selectedDate);
---

<Layout title="Admin Panel">
    <div class="space-y-6">
        <div class="flex justify-between items-center">
            <h1 class="text-3xl font-bold">Panel de Administración</h1>
            <a href="/add" class="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-md transition-colors">
                Añadir Entrenamiento
            </a>
        </div>

        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
            <div class="flex items-center space-x-4 mb-6">
                <label for="dateSelector" class="text-sm font-medium">Seleccionar fecha:</label>
                <input 
                    type="date" 
                    id="dateSelector" 
                    value={format(selectedDate, 'yyyy-MM-dd')}
                    class="px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:ring-2 focus:ring-sky-500 focus:border-sky-500 dark:bg-gray-700 dark:text-white"
                />
            </div>

            <div class="space-y-4">
                {workouts.map((workout) => (
                    <div id={`workout-${workout.id}`} class="bg-gray-50 dark:bg-gray-700 rounded-lg p-4 shadow-sm">
                        <div class="view-mode">
                            <div class="flex justify-between items-start mb-4">
                                <div>
                                    <h2 class="text-xl font-semibold">{workout.title}</h2>
                                    <p class="text-sm text-gray-500 dark:text-gray-400">
                                        {format(workout.date, 'dd/MM/yyyy')}
                                    </p>
                                </div>
                                <div class="flex space-x-2">
                                    <button 
                                        class="edit-btn px-3 py-1 bg-sky-600 hover:bg-sky-700 text-white rounded-md transition-colors"
                                        data-id={workout.id}
                                    >
                                        Editar
                                    </button>
                                    <button 
                                        class="delete-btn px-3 py-1 bg-red-600 hover:bg-red-700 text-white rounded-md transition-colors"
                                        data-id={workout.id}
                                    >
                                        Eliminar
                                    </button>
                                </div>
                            </div>
                            <div class="prose dark:prose-invert max-w-none">
                                <div class="whitespace-pre-line">{workout.description}</div>
                                {workout.notes && (
                                    <div class="mt-2 text-sm text-gray-600 dark:text-gray-300">
                                        <strong>Notas:</strong> {workout.notes}
                                    </div>
                                )}
                            </div>
                        </div>

                        <div class="edit-mode hidden">
                            <form id={`form-${workout.id}`} class="space-y-4">
                                <div>
                                    <label class="block text-sm font-medium mb-1">Fecha</label>
                                    <input 
                                        type="date" 
                                        name="date" 
                                        value={format(workout.date, 'yyyy-MM-dd')}
                                        class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:ring-2 focus:ring-sky-500 focus:border-sky-500 dark:bg-gray-700 dark:text-white"
                                    />
                                </div>
                                <div>
                                    <label class="block text-sm font-medium mb-1">Título</label>
                                    <input 
                                        type="text" 
                                        name="title" 
                                        value={workout.title}
                                        class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:ring-2 focus:ring-sky-500 focus:border-sky-500 dark:bg-gray-700 dark:text-white"
                                    />
                                </div>
                                <div>
                                    <label class="block text-sm font-medium mb-1">Descripción</label>
                                    <textarea 
                                        name="description" 
                                        rows="4"
                                        class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:ring-2 focus:ring-sky-500 focus:border-sky-500 dark:bg-gray-700 dark:text-white"
                                    >{workout.description}</textarea>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium mb-1">Notas</label>
                                    <textarea 
                                        name="notes" 
                                        rows="2"
                                        class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:ring-2 focus:ring-sky-500 focus:border-sky-500 dark:bg-gray-700 dark:text-white"
                                    >{workout.notes}</textarea>
                                </div>
                            </form>
                        </div>
                    </div>
                ))}
            </div>
        </div>
    </div>
</Layout>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const firebaseConfig = {
            apiKey: "AIzaSyBZaIzYF5ozPxodnfxMQI_Azf2xnk8Hdrw",
            authDomain: "crossfit-app-45689.firebaseapp.com",
            projectId: "crossfit-app-45689",
            storageBucket: "crossfit-app-45689.appspot.com",
            messagingSenderId: "172968183910",
            appId: "1:172968183910:web:1b48e17ba79266ea5dc5a7",
            measurementId: "G-SC16FBWZ36"
        };
        
        // Initialize Firebase
        const app = firebase.initializeApp(firebaseConfig);
        const db = firebase.firestore(app);
        window.db = db;

        // Date selector listener
        const dateSelector = document.getElementById('dateSelector');
        if (dateSelector) {
            dateSelector.addEventListener('change', (e) => {
                const newDate = e.target.value;
                if (newDate) {
                    window.location.href = `/admin?date=${newDate}`;
                }
            });
        }

        // Edit buttons listeners
        document.querySelectorAll('.edit-btn').forEach(button => {
            button.addEventListener('click', (e) => {
                e.preventDefault();
                const id = button.dataset.id;
                if (id) toggleEdit(id);
            });
        });

        // Delete buttons listeners
        document.querySelectorAll('.delete-btn').forEach(button => {
            button.addEventListener('click', async (e) => {
                e.preventDefault();
                const id = button.dataset.id;
                if (id && confirm('¿Estás seguro de que quieres eliminar este entrenamiento?')) {
                    try {
                        await deleteDoc(doc(window.db, "workouts", id));
                        window.location.reload();
                    } catch (error) {
                        console.error('Error eliminando entrenamiento:', error);
                        alert('Error al eliminar el entrenamiento');
                    }
                }
            });
        });
    });

    function toggleEdit(id) {
        const workoutEl = document.getElementById(`workout-${id}`);
        if (!workoutEl) return;

        const viewMode = workoutEl.querySelector('.view-mode');
        const editMode = workoutEl.querySelector('.edit-mode');
        const editBtn = workoutEl.querySelector('.edit-btn');

        if (!viewMode || !editMode || !editBtn) return;

        if (editMode.classList.contains('hidden')) {
            viewMode.classList.add('hidden');
            editMode.classList.remove('hidden');
            editBtn.textContent = 'Guardar';
            editBtn.onclick = (e) => {
                e.preventDefault();
                saveWorkout(id);
            };
        } else {
            viewMode.classList.remove('hidden');
            editMode.classList.add('hidden');
            editBtn.textContent = 'Editar';
            editBtn.onclick = (e) => {
                e.preventDefault();
                toggleEdit(id);
            };
        }
    }

    async function saveWorkout(id) {
        const form = document.getElementById(`form-${id}`);
        if (!form) return;

        try {
            const formData = new FormData(form);
            const workoutData = {
                date: formData.get('date'),
                title: formData.get('title'),
                description: formData.get('description'),
                notes: formData.get('notes')
            };

            await updateDoc(doc(window.db, "workouts", id), workoutData);
            window.location.reload();
        } catch (error) {
            console.error('Error al guardar:', error);
            alert('Error al guardar los cambios');
        }
    }
</script>