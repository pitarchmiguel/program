/* empty css                               */
import { c as createComponent, a as createAstro, r as renderTemplate, b as addAttribute, d as renderHead } from '../chunks/astro/server_thY1q-tL.mjs';
import 'kleur/colors';
import 'html-escaper';
import 'clsx';
import { d as db } from '../chunks/firebase_79n_BlYZ.mjs';
import { collection, query, where, getDocs } from 'firebase/firestore';
import { parseISO, format, startOfDay, endOfDay } from 'date-fns';
import { r as requireAuth } from '../chunks/auth_D_cF6cXS.mjs';
export { renderers } from '../renderers.mjs';

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$Astro = createAstro();
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  try {
    await requireAuth(Astro2);
  } catch (error2) {
    return Astro2.redirect("/login");
  }
  let selectedDate = /* @__PURE__ */ new Date();
  let workouts = [];
  let isLoading = true;
  const url = new URL(Astro2.request.url);
  const dateParam = url.searchParams.get("date");
  if (dateParam) {
    selectedDate = parseISO(dateParam);
  }
  try {
    console.log("Obteniendo workouts para la fecha:", format(selectedDate, "dd/MM/yyyy"));
    const workoutsCollection = collection(db, "workouts");
    const dayStart = startOfDay(selectedDate);
    const dayEnd = endOfDay(selectedDate);
    const q = query(
      workoutsCollection,
      where("date", ">=", format(dayStart, "yyyy-MM-dd")),
      where("date", "<=", format(dayEnd, "yyyy-MM-dd"))
    );
    const querySnapshot = await getDocs(q);
    workouts = querySnapshot.docs.map((doc) => {
      const data = doc.data();
      return {
        id: doc.id,
        date: data.date,
        letter: data.letter,
        title: data.title,
        description: data.description?.replace(/<br>/g, "\n") || "",
        notes: data.notes?.replace(/<br>/g, "\n") || ""
      };
    });
  } catch (error2) {
    console.error("Error al obtener los workouts:", error2);
    error2 = "Error al cargar los entrenamientos";
  } finally {
    isLoading = false;
  }
  return renderTemplate(_a || (_a = __template(['<html lang="es" class="dark"> <head><meta charset="utf-8"><link rel="icon" type="image/svg+xml" href="/favicon.svg"><meta name="viewport" content="width=device-width, initial-scale=1.0"><meta name="generator"', '><title>Editar Entrenamientos</title><script src="https://cdn.jsdelivr.net/npm/sweetalert2@11" defer><\/script>', '</head> <body class="w-full h-full flex flex-col bg-white dark:bg-[#242424] text-gray-900 dark:text-[#f9f9f9] transition-colors duration-300"> <div class="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800"> <nav class="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border-b border-gray-200 dark:border-gray-700 sticky top-0 z-50"> <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8"> <div class="flex h-16 items-center justify-between"> <div class="flex items-center gap-4"> <h1 class="text-2xl font-bold bg-gradient-to-r from-sky-500 to-blue-600 text-transparent bg-clip-text">La Program</h1> </div> <div class="flex items-center gap-4"> <button id="themeToggle" class="p-2 rounded-xl bg-white/80 dark:bg-gray-700/80 shadow-sm hover:shadow-md backdrop-blur-sm transition-all duration-300 hover:scale-105" aria-label="Cambiar tema"> <svg class="w-5 h-5 hidden dark:block text-amber-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"></path> </svg> <svg class="w-5 h-5 block dark:hidden text-sky-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"></path> </svg> </button> <button onclick="logout()" class="inline-flex items-center px-4 py-2 border border-transparent rounded-xl text-sm font-medium text-white bg-gradient-to-r from-sky-500 to-blue-600 hover:from-sky-600 hover:to-blue-700 shadow-sm hover:shadow-md transition-all duration-300 hover:scale-105">\nCerrar Sesi\xF3n\n</button> </div> </div> </div> </nav> <main class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-8"> <div class="space-y-8"> <div class="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm p-6 rounded-2xl shadow-lg border border-gray-200 dark:border-gray-700"> <div class="flex flex-col md:flex-row gap-6 items-start md:items-center justify-between"> <div> <h2 class="text-xl font-semibold text-gray-900 dark:text-gray-100">A\xF1adir Entrenamiento</h2> <p class="mt-1 text-sm text-gray-600 dark:text-gray-400">Crea un nuevo entrenamiento para el programa</p> </div> <a href="/add" class="inline-flex items-center px-4 py-2 border border-transparent rounded-xl text-sm font-medium text-white bg-gradient-to-r from-sky-500 to-blue-600 hover:from-sky-600 hover:to-blue-700 shadow-sm hover:shadow-md transition-all duration-300 hover:scale-105"> <svg class="mr-2 -ml-1 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path> </svg>\nNuevo Entrenamiento\n</a> </div> </div> <div class="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-2xl shadow-lg border border-gray-200 dark:border-gray-700"> <div class="p-6 border-b border-gray-200 dark:border-gray-700"> <div class="flex flex-col gap-6"> <div> <h3 class="text-lg font-medium text-gray-900 dark:text-gray-100">Lista de Entrenamientos</h3> <p class="mt-1 text-sm text-gray-600 dark:text-gray-400">Gestiona los entrenamientos existentes</p> </div> <div class="relative w-full"> <input type="date" id="datePicker"', ' class="absolute opacity-0 w-full h-full cursor-pointer z-10 inset-0"> <div class="w-full flex items-center justify-between px-6 py-4 bg-white/80 dark:bg-gray-900/80 border border-gray-300 dark:border-gray-600 rounded-xl text-sm font-medium text-gray-900 dark:text-gray-100 hover:bg-gray-50 dark:hover:bg-gray-800 transition-all duration-200 shadow-sm hover:shadow-md"> <span class="text-gray-700 dark:text-gray-300 text-base">', '</span> <svg class="w-6 h-6 text-sky-500 dark:text-sky-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path> </svg> </div> </div> </div> </div> <div class="overflow-x-auto"> ', " </div> </div> </div> </main> </div> <script>\n            // Tema\n            const themeToggle = document.getElementById('themeToggle');\n            themeToggle.addEventListener('click', () => {\n                if (document.documentElement.classList.contains('dark')) {\n                    document.documentElement.classList.remove('dark');\n                    localStorage.theme = 'light';\n                } else {\n                    document.documentElement.classList.add('dark');\n                    localStorage.theme = 'dark';\n                }\n            });\n\n            // Selector de fecha\n            document.getElementById('datePicker').addEventListener('change', function(e) {\n                window.location.href = `/edit?date=${e.target.value}`;\n            });\n\n            // Asegurarse de que el input date sea accesible en todos los dispositivos\n            document.getElementById('datePicker').addEventListener('touchstart', function(e) {\n                e.preventDefault();\n                this.focus();\n                if (typeof this.showPicker === 'function') {\n                    this.showPicker();\n                }\n            });\n\n            document.getElementById('datePicker').addEventListener('click', function(e) {\n                if (typeof this.showPicker === 'function') {\n                    this.showPicker();\n                }\n            });\n\n            // Cerrar sesi\xF3n\n            window.logout = async function() {\n                try {\n                    const response = await fetch('/api/logout', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        }\n                    });\n\n                    const data = await response.json();\n\n                    if (!response.ok) {\n                        throw new Error(data.message || 'Error al cerrar sesi\xF3n');\n                    }\n\n                    // Esperar a que SweetAlert2 est\xE9 cargado\n                    if (typeof Swal === 'undefined') {\n                        await new Promise(resolve => {\n                            const checkSwal = setInterval(() => {\n                                if (typeof Swal !== 'undefined') {\n                                    clearInterval(checkSwal);\n                                    resolve();\n                                }\n                            }, 100);\n                        });\n                    }\n\n                    await Swal.fire({\n                        title: '\xA1Hasta pronto!',\n                        text: data.message,\n                        icon: 'success',\n                        confirmButtonColor: '#0ea5e9',\n                        background: document.documentElement.classList.contains('dark') ? '#1e293b' : '#ffffff',\n                        color: document.documentElement.classList.contains('dark') ? '#f9f9f9' : '#111827',\n                        customClass: {\n                            confirmButton: 'swal2-confirm-custom'\n                        }\n                    });\n\n                    // Redirigir a la p\xE1gina principal\n                    window.location.href = data.redirect;\n                } catch (error) {\n                    console.error('Error:', error);\n                    if (typeof Swal !== 'undefined') {\n                        await Swal.fire({\n                            title: 'Error',\n                            text: 'Error al cerrar sesi\xF3n: ' + error.message,\n                            icon: 'error',\n                            confirmButtonColor: '#ef4444',\n                            background: document.documentElement.classList.contains('dark') ? '#1e293b' : '#ffffff',\n                            color: document.documentElement.classList.contains('dark') ? '#f9f9f9' : '#111827',\n                            customClass: {\n                                confirmButton: 'swal2-error-custom'\n                            }\n                        });\n                    } else {\n                        alert('Error al cerrar sesi\xF3n: ' + error.message);\n                    }\n                }\n            };\n\n            // Funci\xF3n para eliminar workout\n            window.deleteWorkout = async function(id) {\n                // Esperar a que SweetAlert2 est\xE9 cargado\n                if (typeof Swal === 'undefined') {\n                    await new Promise(resolve => {\n                        const checkSwal = setInterval(() => {\n                            if (typeof Swal !== 'undefined') {\n                                clearInterval(checkSwal);\n                                resolve();\n                            }\n                        }, 100);\n                    });\n                }\n\n                const result = await Swal.fire({\n                    title: '\xBFEst\xE1s seguro?',\n                    text: \"Esta acci\xF3n no se puede deshacer\",\n                    icon: 'warning',\n                    showCancelButton: true,\n                    confirmButtonColor: '#0ea5e9',\n                    cancelButtonColor: '#475569',\n                    confirmButtonText: 'S\xED, eliminar',\n                    cancelButtonText: 'Cancelar',\n                    background: document.documentElement.classList.contains('dark') ? '#1e293b' : '#ffffff',\n                    color: document.documentElement.classList.contains('dark') ? '#f9f9f9' : '#111827',\n                    customClass: {\n                        confirmButton: 'swal2-confirm-custom',\n                        cancelButton: 'swal2-cancel-custom'\n                    }\n                });\n\n                if (result.isConfirmed) {\n                    await handleDelete(id);\n                }\n            };\n\n            // Funci\xF3n auxiliar para manejar la eliminaci\xF3n\n            async function handleDelete(id) {\n                try {\n                    console.log('Intentando eliminar entrenamiento con ID:', id);\n                    \n                    const response = await fetch('/api/deleteWorkout', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify({ id })\n                    });\n\n                    const data = await response.json();\n                    console.log('Respuesta del servidor:', data);\n\n                    if (!response.ok) {\n                        throw new Error(data.message || 'Error al eliminar el entrenamiento');\n                    }\n\n                    // Esperar a que SweetAlert2 est\xE9 cargado\n                    if (typeof Swal === 'undefined') {\n                        await new Promise(resolve => {\n                            const checkSwal = setInterval(() => {\n                                if (typeof Swal !== 'undefined') {\n                                    clearInterval(checkSwal);\n                                    resolve();\n                                }\n                            }, 100);\n                        });\n                    }\n\n                    await Swal.fire({\n                        title: '\xA1Eliminado!',\n                        text: 'El entrenamiento ha sido eliminado correctamente',\n                        icon: 'success',\n                        confirmButtonColor: '#0ea5e9',\n                        background: document.documentElement.classList.contains('dark') ? '#1e293b' : '#ffffff',\n                        color: document.documentElement.classList.contains('dark') ? '#f9f9f9' : '#111827',\n                        customClass: {\n                            confirmButton: 'swal2-confirm-custom'\n                        }\n                    });\n                    \n                    // Recargar la p\xE1gina para mostrar los cambios\n                    window.location.reload();\n                } catch (error) {\n                    console.error('Error:', error);\n                    if (typeof Swal !== 'undefined') {\n                        await Swal.fire({\n                            title: 'Error',\n                            text: 'Error al eliminar el entrenamiento: ' + error.message,\n                            icon: 'error',\n                            confirmButtonColor: '#ef4444',\n                            background: document.documentElement.classList.contains('dark') ? '#1e293b' : '#ffffff',\n                            color: document.documentElement.classList.contains('dark') ? '#f9f9f9' : '#111827',\n                            customClass: {\n                                confirmButton: 'swal2-error-custom'\n                            }\n                        });\n                    } else {\n                        alert('Error al eliminar el entrenamiento: ' + error.message);\n                    }\n                }\n            }\n\n            // A\xF1adir estilos personalizados para SweetAlert2\n            const style = document.createElement('style');\n            style.textContent = `\n                .swal2-confirm-custom {\n                    background: linear-gradient(to right, #0ea5e9, #2563eb) !important;\n                    border: none !important;\n                    box-shadow: 0 4px 6px -1px rgba(14, 165, 233, 0.2) !important;\n                    transition: all 0.3s ease !important;\n                }\n                .swal2-confirm-custom:hover {\n                    transform: translateY(-1px) !important;\n                    box-shadow: 0 6px 8px -1px rgba(14, 165, 233, 0.3) !important;\n                }\n                .swal2-cancel-custom {\n                    background: linear-gradient(to right, #475569, #334155) !important;\n                    border: none !important;\n                    box-shadow: 0 4px 6px -1px rgba(71, 85, 105, 0.2) !important;\n                    transition: all 0.3s ease !important;\n                }\n                .swal2-cancel-custom:hover {\n                    transform: translateY(-1px) !important;\n                    box-shadow: 0 6px 8px -1px rgba(71, 85, 105, 0.3) !important;\n                }\n                .swal2-error-custom {\n                    background: linear-gradient(to right, #ef4444, #dc2626) !important;\n                    border: none !important;\n                    box-shadow: 0 4px 6px -1px rgba(239, 68, 68, 0.2) !important;\n                    transition: all 0.3s ease !important;\n                }\n                .swal2-error-custom:hover {\n                    transform: translateY(-1px) !important;\n                    box-shadow: 0 6px 8px -1px rgba(239, 68, 68, 0.3) !important;\n                }\n            `;\n            document.head.appendChild(style);\n\n            // Funci\xF3n para ordenar la tabla\n            function sortTable(columnIndex) {\n                const table = document.querySelector('table');\n                const tbody = table.querySelector('tbody');\n                const rows = Array.from(tbody.querySelectorAll('tr'));\n                \n                rows.sort((a, b) => {\n                    const aValue = a.cells[columnIndex].textContent.trim();\n                    const bValue = b.cells[columnIndex].textContent.trim();\n                    \n                    if (columnIndex === 0) { // Fecha\n                        return new Date(aValue.split('/').reverse().join('-')) - new Date(bValue.split('/').reverse().join('-'));\n                    } else {\n                        return aValue.localeCompare(bValue);\n                    }\n                });\n                \n                tbody.innerHTML = '';\n                rows.forEach(row => tbody.appendChild(row));\n            }\n\n            // Funci\xF3n para manejar la completitud de los workouts\n            window.toggleWorkoutCompletion = function(checkbox) {\n                const workoutId = checkbox.dataset.workoutId;\n                const isCompleted = checkbox.checked;\n                \n                // Obtener el estado actual de localStorage\n                let completedWorkouts = JSON.parse(localStorage.getItem('completedWorkouts') || '{}');\n                \n                // Actualizar el estado para este workout\n                completedWorkouts[workoutId] = isCompleted;\n                \n                // Guardar en localStorage\n                localStorage.setItem('completedWorkouts', JSON.stringify(completedWorkouts));\n                \n                // Actualizar la clase de la fila para mostrar el estado\n                const row = checkbox.closest('tr');\n                if (isCompleted) {\n                    row.classList.add('bg-green-50/50', 'dark:bg-green-900/20');\n                } else {\n                    row.classList.remove('bg-green-50/50', 'dark:bg-green-900/20');\n                }\n            };\n\n            // Funci\xF3n para inicializar el estado de los checkboxes\n            function initializeWorkoutCompletion() {\n                const completedWorkouts = JSON.parse(localStorage.getItem('completedWorkouts') || '{}');\n                \n                document.querySelectorAll('input[type=\"checkbox\"][data-workout-id]').forEach(checkbox => {\n                    const workoutId = checkbox.dataset.workoutId;\n                    const isCompleted = completedWorkouts[workoutId] || false;\n                    \n                    checkbox.checked = isCompleted;\n                    \n                    const row = checkbox.closest('tr');\n                    if (isCompleted) {\n                        row.classList.add('bg-green-50/50', 'dark:bg-green-900/20');\n                    }\n                });\n            }\n\n            // Inicializar el estado cuando se carga la p\xE1gina\n            document.addEventListener('DOMContentLoaded', function() {\n                initializeWorkoutCompletion();\n            });\n        <\/script> </body> </html>"], ['<html lang="es" class="dark"> <head><meta charset="utf-8"><link rel="icon" type="image/svg+xml" href="/favicon.svg"><meta name="viewport" content="width=device-width, initial-scale=1.0"><meta name="generator"', '><title>Editar Entrenamientos</title><script src="https://cdn.jsdelivr.net/npm/sweetalert2@11" defer><\/script>', '</head> <body class="w-full h-full flex flex-col bg-white dark:bg-[#242424] text-gray-900 dark:text-[#f9f9f9] transition-colors duration-300"> <div class="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800"> <nav class="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border-b border-gray-200 dark:border-gray-700 sticky top-0 z-50"> <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8"> <div class="flex h-16 items-center justify-between"> <div class="flex items-center gap-4"> <h1 class="text-2xl font-bold bg-gradient-to-r from-sky-500 to-blue-600 text-transparent bg-clip-text">La Program</h1> </div> <div class="flex items-center gap-4"> <button id="themeToggle" class="p-2 rounded-xl bg-white/80 dark:bg-gray-700/80 shadow-sm hover:shadow-md backdrop-blur-sm transition-all duration-300 hover:scale-105" aria-label="Cambiar tema"> <svg class="w-5 h-5 hidden dark:block text-amber-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"></path> </svg> <svg class="w-5 h-5 block dark:hidden text-sky-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"></path> </svg> </button> <button onclick="logout()" class="inline-flex items-center px-4 py-2 border border-transparent rounded-xl text-sm font-medium text-white bg-gradient-to-r from-sky-500 to-blue-600 hover:from-sky-600 hover:to-blue-700 shadow-sm hover:shadow-md transition-all duration-300 hover:scale-105">\nCerrar Sesi\xF3n\n</button> </div> </div> </div> </nav> <main class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-8"> <div class="space-y-8"> <div class="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm p-6 rounded-2xl shadow-lg border border-gray-200 dark:border-gray-700"> <div class="flex flex-col md:flex-row gap-6 items-start md:items-center justify-between"> <div> <h2 class="text-xl font-semibold text-gray-900 dark:text-gray-100">A\xF1adir Entrenamiento</h2> <p class="mt-1 text-sm text-gray-600 dark:text-gray-400">Crea un nuevo entrenamiento para el programa</p> </div> <a href="/add" class="inline-flex items-center px-4 py-2 border border-transparent rounded-xl text-sm font-medium text-white bg-gradient-to-r from-sky-500 to-blue-600 hover:from-sky-600 hover:to-blue-700 shadow-sm hover:shadow-md transition-all duration-300 hover:scale-105"> <svg class="mr-2 -ml-1 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path> </svg>\nNuevo Entrenamiento\n</a> </div> </div> <div class="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-2xl shadow-lg border border-gray-200 dark:border-gray-700"> <div class="p-6 border-b border-gray-200 dark:border-gray-700"> <div class="flex flex-col gap-6"> <div> <h3 class="text-lg font-medium text-gray-900 dark:text-gray-100">Lista de Entrenamientos</h3> <p class="mt-1 text-sm text-gray-600 dark:text-gray-400">Gestiona los entrenamientos existentes</p> </div> <div class="relative w-full"> <input type="date" id="datePicker"', ' class="absolute opacity-0 w-full h-full cursor-pointer z-10 inset-0"> <div class="w-full flex items-center justify-between px-6 py-4 bg-white/80 dark:bg-gray-900/80 border border-gray-300 dark:border-gray-600 rounded-xl text-sm font-medium text-gray-900 dark:text-gray-100 hover:bg-gray-50 dark:hover:bg-gray-800 transition-all duration-200 shadow-sm hover:shadow-md"> <span class="text-gray-700 dark:text-gray-300 text-base">', '</span> <svg class="w-6 h-6 text-sky-500 dark:text-sky-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path> </svg> </div> </div> </div> </div> <div class="overflow-x-auto"> ', " </div> </div> </div> </main> </div> <script>\n            // Tema\n            const themeToggle = document.getElementById('themeToggle');\n            themeToggle.addEventListener('click', () => {\n                if (document.documentElement.classList.contains('dark')) {\n                    document.documentElement.classList.remove('dark');\n                    localStorage.theme = 'light';\n                } else {\n                    document.documentElement.classList.add('dark');\n                    localStorage.theme = 'dark';\n                }\n            });\n\n            // Selector de fecha\n            document.getElementById('datePicker').addEventListener('change', function(e) {\n                window.location.href = \\`/edit?date=\\${e.target.value}\\`;\n            });\n\n            // Asegurarse de que el input date sea accesible en todos los dispositivos\n            document.getElementById('datePicker').addEventListener('touchstart', function(e) {\n                e.preventDefault();\n                this.focus();\n                if (typeof this.showPicker === 'function') {\n                    this.showPicker();\n                }\n            });\n\n            document.getElementById('datePicker').addEventListener('click', function(e) {\n                if (typeof this.showPicker === 'function') {\n                    this.showPicker();\n                }\n            });\n\n            // Cerrar sesi\xF3n\n            window.logout = async function() {\n                try {\n                    const response = await fetch('/api/logout', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        }\n                    });\n\n                    const data = await response.json();\n\n                    if (!response.ok) {\n                        throw new Error(data.message || 'Error al cerrar sesi\xF3n');\n                    }\n\n                    // Esperar a que SweetAlert2 est\xE9 cargado\n                    if (typeof Swal === 'undefined') {\n                        await new Promise(resolve => {\n                            const checkSwal = setInterval(() => {\n                                if (typeof Swal !== 'undefined') {\n                                    clearInterval(checkSwal);\n                                    resolve();\n                                }\n                            }, 100);\n                        });\n                    }\n\n                    await Swal.fire({\n                        title: '\xA1Hasta pronto!',\n                        text: data.message,\n                        icon: 'success',\n                        confirmButtonColor: '#0ea5e9',\n                        background: document.documentElement.classList.contains('dark') ? '#1e293b' : '#ffffff',\n                        color: document.documentElement.classList.contains('dark') ? '#f9f9f9' : '#111827',\n                        customClass: {\n                            confirmButton: 'swal2-confirm-custom'\n                        }\n                    });\n\n                    // Redirigir a la p\xE1gina principal\n                    window.location.href = data.redirect;\n                } catch (error) {\n                    console.error('Error:', error);\n                    if (typeof Swal !== 'undefined') {\n                        await Swal.fire({\n                            title: 'Error',\n                            text: 'Error al cerrar sesi\xF3n: ' + error.message,\n                            icon: 'error',\n                            confirmButtonColor: '#ef4444',\n                            background: document.documentElement.classList.contains('dark') ? '#1e293b' : '#ffffff',\n                            color: document.documentElement.classList.contains('dark') ? '#f9f9f9' : '#111827',\n                            customClass: {\n                                confirmButton: 'swal2-error-custom'\n                            }\n                        });\n                    } else {\n                        alert('Error al cerrar sesi\xF3n: ' + error.message);\n                    }\n                }\n            };\n\n            // Funci\xF3n para eliminar workout\n            window.deleteWorkout = async function(id) {\n                // Esperar a que SweetAlert2 est\xE9 cargado\n                if (typeof Swal === 'undefined') {\n                    await new Promise(resolve => {\n                        const checkSwal = setInterval(() => {\n                            if (typeof Swal !== 'undefined') {\n                                clearInterval(checkSwal);\n                                resolve();\n                            }\n                        }, 100);\n                    });\n                }\n\n                const result = await Swal.fire({\n                    title: '\xBFEst\xE1s seguro?',\n                    text: \"Esta acci\xF3n no se puede deshacer\",\n                    icon: 'warning',\n                    showCancelButton: true,\n                    confirmButtonColor: '#0ea5e9',\n                    cancelButtonColor: '#475569',\n                    confirmButtonText: 'S\xED, eliminar',\n                    cancelButtonText: 'Cancelar',\n                    background: document.documentElement.classList.contains('dark') ? '#1e293b' : '#ffffff',\n                    color: document.documentElement.classList.contains('dark') ? '#f9f9f9' : '#111827',\n                    customClass: {\n                        confirmButton: 'swal2-confirm-custom',\n                        cancelButton: 'swal2-cancel-custom'\n                    }\n                });\n\n                if (result.isConfirmed) {\n                    await handleDelete(id);\n                }\n            };\n\n            // Funci\xF3n auxiliar para manejar la eliminaci\xF3n\n            async function handleDelete(id) {\n                try {\n                    console.log('Intentando eliminar entrenamiento con ID:', id);\n                    \n                    const response = await fetch('/api/deleteWorkout', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify({ id })\n                    });\n\n                    const data = await response.json();\n                    console.log('Respuesta del servidor:', data);\n\n                    if (!response.ok) {\n                        throw new Error(data.message || 'Error al eliminar el entrenamiento');\n                    }\n\n                    // Esperar a que SweetAlert2 est\xE9 cargado\n                    if (typeof Swal === 'undefined') {\n                        await new Promise(resolve => {\n                            const checkSwal = setInterval(() => {\n                                if (typeof Swal !== 'undefined') {\n                                    clearInterval(checkSwal);\n                                    resolve();\n                                }\n                            }, 100);\n                        });\n                    }\n\n                    await Swal.fire({\n                        title: '\xA1Eliminado!',\n                        text: 'El entrenamiento ha sido eliminado correctamente',\n                        icon: 'success',\n                        confirmButtonColor: '#0ea5e9',\n                        background: document.documentElement.classList.contains('dark') ? '#1e293b' : '#ffffff',\n                        color: document.documentElement.classList.contains('dark') ? '#f9f9f9' : '#111827',\n                        customClass: {\n                            confirmButton: 'swal2-confirm-custom'\n                        }\n                    });\n                    \n                    // Recargar la p\xE1gina para mostrar los cambios\n                    window.location.reload();\n                } catch (error) {\n                    console.error('Error:', error);\n                    if (typeof Swal !== 'undefined') {\n                        await Swal.fire({\n                            title: 'Error',\n                            text: 'Error al eliminar el entrenamiento: ' + error.message,\n                            icon: 'error',\n                            confirmButtonColor: '#ef4444',\n                            background: document.documentElement.classList.contains('dark') ? '#1e293b' : '#ffffff',\n                            color: document.documentElement.classList.contains('dark') ? '#f9f9f9' : '#111827',\n                            customClass: {\n                                confirmButton: 'swal2-error-custom'\n                            }\n                        });\n                    } else {\n                        alert('Error al eliminar el entrenamiento: ' + error.message);\n                    }\n                }\n            }\n\n            // A\xF1adir estilos personalizados para SweetAlert2\n            const style = document.createElement('style');\n            style.textContent = \\`\n                .swal2-confirm-custom {\n                    background: linear-gradient(to right, #0ea5e9, #2563eb) !important;\n                    border: none !important;\n                    box-shadow: 0 4px 6px -1px rgba(14, 165, 233, 0.2) !important;\n                    transition: all 0.3s ease !important;\n                }\n                .swal2-confirm-custom:hover {\n                    transform: translateY(-1px) !important;\n                    box-shadow: 0 6px 8px -1px rgba(14, 165, 233, 0.3) !important;\n                }\n                .swal2-cancel-custom {\n                    background: linear-gradient(to right, #475569, #334155) !important;\n                    border: none !important;\n                    box-shadow: 0 4px 6px -1px rgba(71, 85, 105, 0.2) !important;\n                    transition: all 0.3s ease !important;\n                }\n                .swal2-cancel-custom:hover {\n                    transform: translateY(-1px) !important;\n                    box-shadow: 0 6px 8px -1px rgba(71, 85, 105, 0.3) !important;\n                }\n                .swal2-error-custom {\n                    background: linear-gradient(to right, #ef4444, #dc2626) !important;\n                    border: none !important;\n                    box-shadow: 0 4px 6px -1px rgba(239, 68, 68, 0.2) !important;\n                    transition: all 0.3s ease !important;\n                }\n                .swal2-error-custom:hover {\n                    transform: translateY(-1px) !important;\n                    box-shadow: 0 6px 8px -1px rgba(239, 68, 68, 0.3) !important;\n                }\n            \\`;\n            document.head.appendChild(style);\n\n            // Funci\xF3n para ordenar la tabla\n            function sortTable(columnIndex) {\n                const table = document.querySelector('table');\n                const tbody = table.querySelector('tbody');\n                const rows = Array.from(tbody.querySelectorAll('tr'));\n                \n                rows.sort((a, b) => {\n                    const aValue = a.cells[columnIndex].textContent.trim();\n                    const bValue = b.cells[columnIndex].textContent.trim();\n                    \n                    if (columnIndex === 0) { // Fecha\n                        return new Date(aValue.split('/').reverse().join('-')) - new Date(bValue.split('/').reverse().join('-'));\n                    } else {\n                        return aValue.localeCompare(bValue);\n                    }\n                });\n                \n                tbody.innerHTML = '';\n                rows.forEach(row => tbody.appendChild(row));\n            }\n\n            // Funci\xF3n para manejar la completitud de los workouts\n            window.toggleWorkoutCompletion = function(checkbox) {\n                const workoutId = checkbox.dataset.workoutId;\n                const isCompleted = checkbox.checked;\n                \n                // Obtener el estado actual de localStorage\n                let completedWorkouts = JSON.parse(localStorage.getItem('completedWorkouts') || '{}');\n                \n                // Actualizar el estado para este workout\n                completedWorkouts[workoutId] = isCompleted;\n                \n                // Guardar en localStorage\n                localStorage.setItem('completedWorkouts', JSON.stringify(completedWorkouts));\n                \n                // Actualizar la clase de la fila para mostrar el estado\n                const row = checkbox.closest('tr');\n                if (isCompleted) {\n                    row.classList.add('bg-green-50/50', 'dark:bg-green-900/20');\n                } else {\n                    row.classList.remove('bg-green-50/50', 'dark:bg-green-900/20');\n                }\n            };\n\n            // Funci\xF3n para inicializar el estado de los checkboxes\n            function initializeWorkoutCompletion() {\n                const completedWorkouts = JSON.parse(localStorage.getItem('completedWorkouts') || '{}');\n                \n                document.querySelectorAll('input[type=\"checkbox\"][data-workout-id]').forEach(checkbox => {\n                    const workoutId = checkbox.dataset.workoutId;\n                    const isCompleted = completedWorkouts[workoutId] || false;\n                    \n                    checkbox.checked = isCompleted;\n                    \n                    const row = checkbox.closest('tr');\n                    if (isCompleted) {\n                        row.classList.add('bg-green-50/50', 'dark:bg-green-900/20');\n                    }\n                });\n            }\n\n            // Inicializar el estado cuando se carga la p\xE1gina\n            document.addEventListener('DOMContentLoaded', function() {\n                initializeWorkoutCompletion();\n            });\n        <\/script> </body> </html>"])), addAttribute(Astro2.generator, "content"), renderHead(), addAttribute(format(selectedDate, "yyyy-MM-dd"), "value"), format(selectedDate, "dd/MM/yyyy"), isLoading ? renderTemplate`<div class="p-8 text-center"> <div class="inline-block animate-spin rounded-full h-8 w-8 border-4 border-sky-500 border-t-transparent"></div> <p class="mt-4 text-gray-600 dark:text-gray-400">Cargando entrenamientos...</p> </div>` : workouts.length === 0 ? renderTemplate`<div class="p-8 text-center"> <div class="inline-flex items-center justify-center w-12 h-12 rounded-full bg-gray-100 dark:bg-gray-800 mb-4"> <svg class="w-6 h-6 text-gray-500 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path> </svg> </div> <p class="text-lg text-gray-600 dark:text-gray-400">No hay entrenamientos para este día</p> <a href="/add" class="mt-4 inline-flex items-center px-4 py-2 border border-transparent rounded-xl text-sm font-medium text-white bg-gradient-to-r from-sky-500 to-blue-600 hover:from-sky-600 hover:to-blue-700 shadow-sm hover:shadow-md transition-all duration-300 hover:scale-105"> <svg class="mr-2 -ml-1 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path> </svg>
Añadir Entrenamiento
</a> </div>` : renderTemplate`<table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700"> <thead class="bg-gray-50/50 dark:bg-gray-900/50"> <tr> <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider cursor-pointer hover:text-sky-500 dark:hover:text-sky-400 transition-colors duration-200" onclick="sortTable(0)">
Fecha
<svg class="w-4 h-4 inline-block ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4"></path> </svg> </th> <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider cursor-pointer hover:text-sky-500 dark:hover:text-sky-400 transition-colors duration-200" onclick="sortTable(1)">
Letra
<svg class="w-4 h-4 inline-block ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4"></path> </svg> </th> <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider cursor-pointer hover:text-sky-500 dark:hover:text-sky-400 transition-colors duration-200" onclick="sortTable(2)">
Título
<svg class="w-4 h-4 inline-block ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4"></path> </svg> </th> <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Acciones</th> </tr> </thead> <tbody class="bg-transparent divide-y divide-gray-200 dark:divide-gray-700"> ${workouts.map((workout) => renderTemplate`<tr class="hover:bg-gray-50/50 dark:hover:bg-gray-700/50 transition-colors duration-200"> <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100"> ${format(new Date(workout.date), "dd/MM/yyyy")} </td> <td class="px-6 py-4 whitespace-nowrap"> <span class="text-lg font-semibold bg-gradient-to-r from-sky-500 to-blue-600 text-transparent bg-clip-text">${workout.letter}</span> </td> <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">${workout.title}</td> <td class="px-6 py-4 whitespace-nowrap text-sm"> <div class="flex items-center gap-4"> <a${addAttribute(`/edit/${workout.id}`, "href")} class="text-sky-600 dark:text-sky-400 hover:text-sky-700 dark:hover:text-sky-300 transition-colors duration-200" title="Editar"> <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path> </svg> </a> <button${addAttribute(`deleteWorkout('${workout.id}')`, "onclick")} class="text-red-600 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300 transition-colors duration-200" title="Eliminar"> <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path> </svg> </button> </div> </td> </tr>`)} </tbody> </table>`);
}, "/Users/miguelpitarch/Desktop/program/src/pages/edit/index.astro", void 0);

const $$file = "/Users/miguelpitarch/Desktop/program/src/pages/edit/index.astro";
const $$url = "/edit";

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
    __proto__: null,
    default: $$Index,
    file: $$file,
    url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

const page = () => _page;

export { page };
