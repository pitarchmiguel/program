---
import Layout from '../layouts/Layout.astro';
import { db } from '../firebase';
import { collection, getDocs, query, orderBy, addDoc } from 'firebase/firestore';
import { format, parseISO } from 'date-fns';
import { es } from 'date-fns/locale';

// Definir los ejercicios y categorías según la lista del usuario
const ejerciciosPR = {
    "Squats": [
        "Back Squat",
        "Front Squat",
        "Overhead Squat"
    ],
    "Cleans": [
        "Clean",
        "Hang Power Clean",
        "Muscle Clean",
        "Power Clean",
        "Squat Clean"
    ],
    "Presses": [
        "Bench Press",
        "Cluster",
        "Push Press",
        "Shoulder Press",
        "Thruster"
    ],
    "Jerks": [
        "Push Jerk",
        "Split Jerk"
    ],
    "Snatches": [
        "Hang Power Snatch",
        "Hang Squat Snatch",
        "Muscle Snatch",
        "Power Snatch",
        "Snatch",
        "Snatch Balance",
        "Squat Snatch"
    ],
    "Deadlifts": [
        "Deadlift",
        "Snatch Grip Deadlift"
    ],
    "Olympic Lifts": [
        "Clean and Jerk",
        "Power Clean and Jerk"
    ]
};

let prs: Array<{
    id: string;
    fecha: Date;
    ejercicio: string;
    categoria: string;
    valor: number;
    unidad: string;
    notas?: string;
}> = [];
let isLoading = true;
let error = null;

try {
    const prsCollection = collection(db, "prs");
    const q = query(prsCollection, orderBy("fecha", "desc"));
    const querySnapshot = await getDocs(q);
    
    prs = querySnapshot.docs.map(doc => {
        const data = doc.data();
        return {
            id: doc.id,
            fecha: parseISO(data.fecha),
            ejercicio: data.ejercicio,
            categoria: data.categoria,
            valor: data.valor,
            unidad: data.unidad,
            notas: data.notas
        };
    });
} catch (err) {
    console.error('Error al obtener los PRs:', err);
    error = 'Error al cargar los PRs';
} finally {
    isLoading = false;
}

// Agrupar PRs por categoría
const prsPorCategoria = prs.reduce((acc, pr) => {
    if (!acc[pr.categoria]) {
        acc[pr.categoria] = [];
    }
    acc[pr.categoria].push(pr);
    return acc;
}, {} as Record<string, typeof prs>);
---

<Layout title="PRs - La Program">
    <div class="w-full min-h-screen flex flex-col bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800 text-gray-900 dark:text-[#f9f9f9] transition-colors duration-300">
        <div class="w-full h-full my-4 md:my-8 px-4 md:p-6 max-w-4xl mx-auto pb-20">
            <div class="mb-8">
                <h1 class="text-2xl md:text-3xl font-bold bg-gradient-to-r from-sky-500 to-blue-600 text-transparent bg-clip-text">
                    Mis PRs
                </h1>
                <p class="text-gray-600 dark:text-gray-400 mt-2">
                    Registro de tus mejores marcas personales
                </p>
            </div>

            <!-- Grid de ejercicios -->
            <div class="mb-8">
                {Object.entries(ejerciciosPR).map(([categoria, ejercicios]) => (
                    <div class="mb-6">
                        <div class="flex items-center mb-2">
                            <span class="font-bold text-lg">{categoria}</span>
                        </div>
                        <div class="divide-y divide-gray-200 dark:divide-gray-700">
                            {ejercicios.map(ejercicio => (
                                <div
                                    class="py-2 px-1 cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-200"
                                    onclick={`mostrarFormularioNuevoPR('${categoria}', '${ejercicio}')`}
                                >
                                    <span class="text-base text-gray-800 dark:text-gray-100">{ejercicio}</span>
                                </div>
                            ))}
                        </div>
                    </div>
                ))}
            </div>

            <!-- Lista de PRs registrados -->
            <h2 class="text-xl font-semibold mb-4">PRs Registrados</h2>
            {isLoading ? (
                <div class="text-center animate-fade-in">
                    <div class="inline-block animate-spin rounded-full h-8 w-8 border-4 border-sky-500 border-t-transparent"></div>
                    <p class="text-lg md:text-xl text-gray-400 dark:text-gray-500 mt-4">Cargando PRs...</p>
                </div>
            ) : error ? (
                <div class="text-center animate-fade-in">
                    <p class="text-lg md:text-xl text-red-500 dark:text-red-400 mb-4">{error}</p>
                </div>
            ) : prs.length === 0 ? (
                <div class="text-center py-8 animate-fade-in">
                    <p class="text-gray-500 dark:text-gray-400">No hay PRs registrados aún</p>
                </div>
            ) : (
                <div class="space-y-8">
                    {Object.entries(prsPorCategoria).map(([categoria, prs]) => (
                        <div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg overflow-hidden">
                            <div class="p-4 bg-gradient-to-r from-sky-500 to-blue-600 text-white">
                                <h2 class="text-lg font-semibold">{categoria}</h2>
                            </div>
                            <div class="p-4 space-y-4">
                                {prs.map(pr => (
                                    <div class="flex items-center justify-between p-3 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-300">
                                        <div class="flex-1">
                                            <h3 class="font-medium">{pr.ejercicio}</h3>
                                            <p class="text-sm text-gray-600 dark:text-gray-400">
                                                {format(pr.fecha, "d 'de' MMMM 'de' yyyy", { locale: es })}
                                            </p>
                                            {pr.notas && (
                                                <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">
                                                    {pr.notas}
                                                </p>
                                            )}
                                        </div>
                                        <div class="ml-4 text-right">
                                            <span class="text-lg font-bold text-sky-500 dark:text-sky-400">
                                                {pr.valor}{pr.unidad}
                                            </span>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        </div>
                    ))}
                </div>
            )}
        </div>

        <!-- Modal para añadir nuevo PR -->
        <div id="modalNuevoPR" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
            <div class="bg-white dark:bg-gray-800 rounded-xl shadow-xl max-w-md w-full mx-4 transform transition-all">
                <div class="p-6">
                    <div class="flex justify-between items-center mb-4">
                        <h3 class="text-xl font-semibold" id="modalTitulo">Nuevo PR</h3>
                        <button onclick="cerrarModal()" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div>
                    <form id="formNuevoPR" onsubmit="guardarPR(event)" class="space-y-4">
                        <input type="hidden" id="categoria" name="categoria">
                        <input type="hidden" id="ejercicio" name="ejercicio">
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                                Peso (kg)
                            </label>
                            <input
                                type="number"
                                id="valor"
                                name="valor"
                                step="0.5"
                                min="0"
                                required
                                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-sky-500 focus:border-sky-500 dark:bg-gray-700 dark:text-white"
                            >
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                                Fecha
                            </label>
                            <input
                                type="date"
                                id="fecha"
                                name="fecha"
                                required
                                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-sky-500 focus:border-sky-500 dark:bg-gray-700 dark:text-white"
                            >
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                                Notas (opcional)
                            </label>
                            <textarea
                                id="notas"
                                name="notas"
                                rows="3"
                                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-sky-500 focus:border-sky-500 dark:bg-gray-700 dark:text-white"
                            ></textarea>
                        </div>
                        
                        <div class="flex justify-end gap-3 mt-6">
                            <button
                                type="button"
                                onclick="cerrarModal()"
                                class="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors duration-300"
                            >
                                Cancelar
                            </button>
                            <button
                                type="submit"
                                class="px-4 py-2 text-sm font-medium text-white bg-gradient-to-r from-sky-500 to-blue-600 rounded-lg hover:from-sky-600 hover:to-blue-700 transition-colors duration-300"
                            >
                                Guardar PR
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Barra de navegación inferior -->
        <nav class="fixed bottom-0 left-0 right-0 bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700 shadow-lg z-50">
            <div class="max-w-4xl mx-auto px-4">
                <div class="flex justify-around items-center h-16">
                    <a href="/" class="flex flex-col items-center justify-center flex-1 h-full text-gray-600 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-300">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
                        </svg>
                        <span class="text-xs mt-1">WODs</span>
                    </a>
                    <a href="/resultados" class="flex flex-col items-center justify-center flex-1 h-full text-gray-600 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-300">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                        </svg>
                        <span class="text-xs mt-1">Resultados</span>
                    </a>
                    <a href="/prs" class="flex flex-col items-center justify-center flex-1 h-full text-sky-500 dark:text-sky-400 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-300">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
                        </svg>
                        <span class="text-xs mt-1">PRs</span>
                    </a>
                </div>
            </div>
        </nav>
    </div>
</Layout>

<script is:inline>
    let modalAbierto = false;

    function mostrarFormularioNuevoPR(categoria, ejercicio) {
        const modal = document.getElementById('modalNuevoPR');
        const modalTitulo = document.getElementById('modalTitulo');
        const categoriaInput = document.getElementById('categoria');
        const ejercicioInput = document.getElementById('ejercicio');
        const fechaInput = document.getElementById('fecha');
        
        if (!modal || !modalTitulo || !categoriaInput || !ejercicioInput || !fechaInput) {
            console.error('No se encontraron algunos elementos del modal');
            return;
        }
        
        modalTitulo.textContent = `Nuevo PR - ${ejercicio}`;
        categoriaInput.value = categoria;
        ejercicioInput.value = ejercicio;
        fechaInput.value = new Date().toISOString().split('T')[0];
        
        modal.classList.remove('hidden');
        modal.classList.add('flex');
        modalAbierto = true;
        
        // Prevenir scroll del body
        document.body.style.overflow = 'hidden';
    }

    function cerrarModal() {
        const modal = document.getElementById('modalNuevoPR');
        if (!modal) return;
        
        modal.classList.add('hidden');
        modal.classList.remove('flex');
        modalAbierto = false;
        
        // Restaurar scroll del body
        document.body.style.overflow = '';
    }

    async function guardarPR(event) {
        event.preventDefault();
        
        const form = event.target;
        const formData = new FormData(form);
        
        const prData = {
            categoria: formData.get('categoria'),
            ejercicio: formData.get('ejercicio'),
            valor: parseFloat(formData.get('valor')),
            unidad: 'kg',
            fecha: formData.get('fecha'),
            notas: formData.get('notas') || null
        };

        try {
            // Importar las funciones necesarias dinámicamente
            const { collection, addDoc } = await import('firebase/firestore');
            const { db } = await import('../firebase');
            
            const prsCollection = collection(db, "prs");
            await addDoc(prsCollection, prData);
            
            // Cerrar modal y recargar página
            cerrarModal();
            window.location.reload();
        } catch (error) {
            console.error('Error al guardar el PR:', error);
            alert('Error al guardar el PR. Por favor, inténtalo de nuevo.');
        }
    }

    // Inicializar eventos cuando el DOM esté listo
    document.addEventListener('DOMContentLoaded', () => {
        // Cerrar modal al hacer clic fuera
        const modal = document.getElementById('modalNuevoPR');
        if (modal) {
            modal.addEventListener('click', (event) => {
                if (event.target === modal) {
                    cerrarModal();
                }
            });
        }

        // Cerrar modal con Escape
        document.addEventListener('keydown', (event) => {
            if (event.key === 'Escape' && modalAbierto) {
                cerrarModal();
            }
        });
    });
</script>

<style>
    .animate-fade-in {
        animation: fadeIn 0.3s ease-in-out;
    }

    @keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(10px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    #modalNuevoPR {
        backdrop-filter: blur(4px);
    }
</style> 