---
---

<html lang="es">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Agregar Entrenamiento</title>
	</head>
	<body class="w-full h-full flex flex-col bg-[#242424]">
		<div class="w-full h-full my-8 p-6">
			<h1 class="text-3xl font-bold mb-6 text-[#f9f9f9]">new workout</h1>
			<div id="notification" class="hidden mb-4 p-4 rounded-md"></div>
			<form id="workoutForm" class="space-y-4 text-[#f9f9f9]">
				<div>
					<label for="workoutDate" class="block text-sm font-medium">Fecha</label>
					<input type="date" id="workoutDate" name="workoutDate" required class="p-3 mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50 text-[#242424]">
				</div>
				 <div class="flex space-x-4">
                    <div class="flex-1">
                        <label for="workoutLetter" class="block text-sm font-medium">Letra</label>
                        <input type="text" id="workoutLetter" name="workoutLetter" maxlength="1" required class="p-3 mt-1 block w-16 rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50 text-[#242424]">
                    </div>
                    <div class="flex-auto">
                        <label for="workoutTitle" class="block text-sm font-medium">Título</label>
                        <input type="text" id="workoutTitle" name="workoutTitle" required class="p-3 mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50 text-[#242424]">
                    </div>
                </div>
				<div>
					<label for="workoutDescription" class="block text-sm font-medium">Workout</label>
					<textarea id="workoutDescription" name="workoutDescription" rows="7" required class="p-3 mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50 text-[#242424]"></textarea>
				</div>
				 <div>
                    <label for="workoutNotes" class="block text-sm font-medium">Notas</label>
                    <textarea id="workoutNotes" name="workoutNotes" rows="4" class="p-3 mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50 text-[#242424]"></textarea>
                </div>
				<div class="flex justify-between">
					<button type="submit" class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-sky-600 hover:bg-sky-900 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition duration-300">
						Add workout
					</button>
					<a href="/" class="inline-flex justify-center py-2 px-4 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition duration-300">
						Back
					</a>
				</div>
			</form>
		</div>
	</body>
	<style>
		body {
			font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
			color: #242424;
		}
		.notification-success {
			background-color: #d4edda;
			border-color: #c3e6cb;
			color: #155724;
		}
		.notification-error {
			background-color: #f8d7da;
			border-color: #f5c6cb;
			color: #721c24;
		}
		.hidden {
			display: none;
		}
	</style>
	
	<script>
		import { db } from '../firebase';
		import { collection, addDoc } from 'firebase/firestore';
		import { startOfWeek, format } from 'date-fns';

		function showNotification(message, isError = false) {
			const notification = document.getElementById('notification');
			notification.textContent = message;
			notification.classList.remove('hidden', 'notification-success', 'notification-error');
			notification.classList.add(isError ? 'notification-error' : 'notification-success');
			
			setTimeout(() => {
				notification.classList.add('hidden');
			}, 3000);
		}

		function generateUniqueId() {
			return Date.now().toString(36) + Math.random().toString(36).substr(2);
		}

		async function handleFormSubmit(event) {
			event.preventDefault();
			
			const date = (document.getElementById('workoutDate') as HTMLInputElement).value;
			const letter = (document.getElementById('workoutLetter') as HTMLInputElement).value;
			const title = (document.getElementById('workoutTitle') as HTMLInputElement).value;
			const description = (document.getElementById('workoutDescription') as HTMLTextAreaElement).value;
			const notes = (document.getElementById('workoutNotes') as HTMLTextAreaElement).value;
			const uniqueId = generateUniqueId();

			try {
				await addDoc(collection(db, "workouts"), {
					id: uniqueId,
					date: format(new Date(date), 'yyyy-MM-dd'),
					letter: letter,
					title: title,
					description: description.replace(/\n/g, '<br>'),
					notes: notes.replace(/\n/g, '<br>'),
					createdAt: new Date().toISOString()
				});
				
				showNotification("Entrenamiento añadido correctamente");
				
				// Calcular el inicio de la semana para la fecha del entrenamiento
				const workoutDate = new Date(date);
				const weekStart = startOfWeek(workoutDate, { weekStartsOn: 1 });
				const formattedWeekStart = format(weekStart, 'yyyy-MM-dd');
				
				// Esperar un poco antes de redirigir para que el usuario pueda ver la notificación
				// setTimeout(() => {
				// 	window.location.href = `/?week=${formattedWeekStart}`;
				// }, 2000);

			} catch (error) {
				console.error("Error al añadir el entrenamiento: ", error);
				showNotification("Error al añadir el entrenamiento", true);
			}
		}

		document.addEventListener('DOMContentLoaded', () => {
			const form = document.getElementById('workoutForm');
			form.addEventListener('submit', handleFormSubmit);
		});
	</script>
</html>