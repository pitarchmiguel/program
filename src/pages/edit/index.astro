---
import { db } from '../../firebase';
import { collection, getDocs, query, where } from 'firebase/firestore';
import { format, parseISO, startOfDay, endOfDay } from 'date-fns';
import { es } from 'date-fns/locale';

// Verificar autenticación
const session = Astro.cookies.get('session');
if (!session || session.value !== 'authenticated') {
    return Astro.redirect('/login');
}

let selectedDate = new Date();
let workouts = [];
let isLoading = true;
let error = null;

// Obtener la fecha de la URL si existe
const url = new URL(Astro.request.url);
const dateParam = url.searchParams.get('date');
if (dateParam) {
    selectedDate = parseISO(dateParam);
}

try {
    console.log('Obteniendo workouts para la fecha:', format(selectedDate, 'dd/MM/yyyy'));
    const workoutsCollection = collection(db, "workouts");
    const dayStart = startOfDay(selectedDate);
    const dayEnd = endOfDay(selectedDate);
    
    const q = query(
        workoutsCollection,
        where("date", ">=", format(dayStart, 'yyyy-MM-dd')),
        where("date", "<=", format(dayEnd, 'yyyy-MM-dd'))
    );
    
    const querySnapshot = await getDocs(q);
    workouts = querySnapshot.docs.map(doc => {
        const data = doc.data();
        return {
            id: doc.id,
            date: data.date,
            letter: data.letter,
            title: data.title,
            description: data.description?.replace(/<br>/g, '\n') || '',
            notes: data.notes?.replace(/<br>/g, '\n') || ''
        };
    });
} catch (error) {
    console.error('Error al obtener los workouts:', error);
    error = 'Error al cargar los entrenamientos';
} finally {
    isLoading = false;
}
---

<!DOCTYPE html>
<html lang="es" class="dark">
    <head>
        <meta charset="utf-8" />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta name="generator" content={Astro.generator} />
        <title>Editar Entrenamientos</title>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11" defer></script>
        <script>
            // Verificar preferencias del sistema y localStorage
            if (localStorage.theme === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
                document.documentElement.classList.add('dark');
            } else {
                document.documentElement.classList.remove('dark');
            }
        </script>
    </head>
    <body class="w-full h-full flex flex-col bg-white dark:bg-[#242424] text-gray-900 dark:text-[#f9f9f9] transition-colors duration-300">
        <div class="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800">
            <nav class="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border-b border-gray-200 dark:border-gray-700 sticky top-0 z-50">
                <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
                    <div class="flex h-16 items-center justify-between">
                        <div class="flex items-center gap-4">
                            <h1 class="text-2xl font-bold bg-gradient-to-r from-sky-500 to-blue-600 text-transparent bg-clip-text">La Program</h1>
                        </div>
                        <div class="flex items-center gap-4">
                            <button 
                                id="themeToggle"
                                class="p-2 rounded-xl bg-white/80 dark:bg-gray-700/80 shadow-sm hover:shadow-md backdrop-blur-sm transition-all duration-300 hover:scale-105"
                                aria-label="Cambiar tema"
                            >
                                <svg class="w-5 h-5 hidden dark:block text-amber-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
                                </svg>
                                <svg class="w-5 h-5 block dark:hidden text-sky-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
                                </svg>
                            </button>
                            <button 
                                onclick="logout()"
                                class="inline-flex items-center px-4 py-2 border border-transparent rounded-xl text-sm font-medium text-white bg-gradient-to-r from-sky-500 to-blue-600 hover:from-sky-600 hover:to-blue-700 shadow-sm hover:shadow-md transition-all duration-300 hover:scale-105"
                            >
                                Cerrar Sesión
                            </button>
                        </div>
                    </div>
                </div>
            </nav>

            <main class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-8">
                <div class="space-y-8">
                    <div class="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm p-6 rounded-2xl shadow-lg border border-gray-200 dark:border-gray-700">
                        <div class="flex flex-col md:flex-row gap-6 items-start md:items-center justify-between">
                            <div>
                                <h2 class="text-xl font-semibold text-gray-900 dark:text-gray-100">Añadir Entrenamiento</h2>
                                <p class="mt-1 text-sm text-gray-600 dark:text-gray-400">Crea un nuevo entrenamiento para el programa</p>
                            </div>
                            <a 
                                href="/add" 
                                class="inline-flex items-center px-4 py-2 border border-transparent rounded-xl text-sm font-medium text-white bg-gradient-to-r from-sky-500 to-blue-600 hover:from-sky-600 hover:to-blue-700 shadow-sm hover:shadow-md transition-all duration-300 hover:scale-105"
                            >
                                <svg class="mr-2 -ml-1 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                                </svg>
                                Nuevo Entrenamiento
                            </a>
                        </div>
                    </div>

                    <div class="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-2xl shadow-lg border border-gray-200 dark:border-gray-700">
                        <div class="p-6 border-b border-gray-200 dark:border-gray-700">
                            <div class="flex flex-col gap-6">
                                <div>
                                    <h3 class="text-lg font-medium text-gray-900 dark:text-gray-100">Lista de Entrenamientos</h3>
                                    <p class="mt-1 text-sm text-gray-600 dark:text-gray-400">Gestiona los entrenamientos existentes</p>
                                </div>
                                <div class="relative w-full">
                                    <input 
                                        type="date" 
                                        id="datePicker"
                                        value={format(selectedDate, 'yyyy-MM-dd')}
                                        class="absolute opacity-0 w-full h-full cursor-pointer z-10 inset-0"
                                    />
                                    <div 
                                        class="w-full flex items-center justify-between px-6 py-4 bg-white/80 dark:bg-gray-900/80 border border-gray-300 dark:border-gray-600 rounded-xl text-sm font-medium text-gray-900 dark:text-gray-100 hover:bg-gray-50 dark:hover:bg-gray-800 transition-all duration-200 shadow-sm hover:shadow-md"
                                    >
                                        <span class="text-gray-700 dark:text-gray-300 text-base">{format(selectedDate, 'dd/MM/yyyy')}</span>
                                        <svg class="w-6 h-6 text-sky-500 dark:text-sky-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                        </svg>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="overflow-x-auto">
                            {isLoading ? (
                                <div class="p-8 text-center">
                                    <div class="inline-block animate-spin rounded-full h-8 w-8 border-4 border-sky-500 border-t-transparent"></div>
                                    <p class="mt-4 text-gray-600 dark:text-gray-400">Cargando entrenamientos...</p>
                                </div>
                            ) : error ? (
                                <div class="p-8 text-center">
                                    <p class="text-red-600 dark:text-red-400">{error}</p>
                                </div>
                            ) : workouts.length === 0 ? (
                                <div class="p-8 text-center">
                                    <div class="inline-flex items-center justify-center w-12 h-12 rounded-full bg-gray-100 dark:bg-gray-800 mb-4">
                                        <svg class="w-6 h-6 text-gray-500 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                        </svg>
                                    </div>
                                    <p class="text-lg text-gray-600 dark:text-gray-400">No hay entrenamientos para este día</p>
                                    <a 
                                        href="/add" 
                                        class="mt-4 inline-flex items-center px-4 py-2 border border-transparent rounded-xl text-sm font-medium text-white bg-gradient-to-r from-sky-500 to-blue-600 hover:from-sky-600 hover:to-blue-700 shadow-sm hover:shadow-md transition-all duration-300 hover:scale-105"
                                    >
                                        <svg class="mr-2 -ml-1 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                                        </svg>
                                        Añadir Entrenamiento
                                    </a>
                                </div>
                            ) : (
                                <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                                    <thead class="bg-gray-50/50 dark:bg-gray-900/50">
                                        <tr>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider cursor-pointer hover:text-sky-500 dark:hover:text-sky-400 transition-colors duration-200" onclick="sortTable(0)">
                                                Fecha
                                                <svg class="w-4 h-4 inline-block ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4" />
                                                </svg>
                                            </th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider cursor-pointer hover:text-sky-500 dark:hover:text-sky-400 transition-colors duration-200" onclick="sortTable(1)">
                                                Letra
                                                <svg class="w-4 h-4 inline-block ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4" />
                                                </svg>
                                            </th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider cursor-pointer hover:text-sky-500 dark:hover:text-sky-400 transition-colors duration-200" onclick="sortTable(2)">
                                                Título
                                                <svg class="w-4 h-4 inline-block ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4" />
                                                </svg>
                                            </th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Acciones</th>
                                        </tr>
                                    </thead>
                                    <tbody class="bg-transparent divide-y divide-gray-200 dark:divide-gray-700">
                                        {workouts.map(workout => (
                                            <tr class="hover:bg-gray-50/50 dark:hover:bg-gray-700/50 transition-colors duration-200">
                                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">
                                                    {format(new Date(workout.date), 'dd/MM/yyyy')}
                                                </td>
                                                <td class="px-6 py-4 whitespace-nowrap">
                                                    <span class="text-lg font-semibold bg-gradient-to-r from-sky-500 to-blue-600 text-transparent bg-clip-text">{workout.letter}</span>
                                                </td>
                                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">{workout.title}</td>
                                                <td class="px-6 py-4 whitespace-nowrap text-sm">
                                                    <div class="flex items-center gap-4">
                                                        <a 
                                                            href={`/edit/${workout.id}`}
                                                            class="text-sky-600 dark:text-sky-400 hover:text-sky-700 dark:hover:text-sky-300 transition-colors duration-200"
                                                            title="Editar"
                                                        >
                                                            <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                                            </svg>
                                                        </a>
                                                        <button
                                                            onclick={`deleteWorkout('${workout.id}')`}
                                                            class="text-red-600 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300 transition-colors duration-200"
                                                            title="Eliminar"
                                                        >
                                                            <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                                            </svg>
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        ))}
                                    </tbody>
                                </table>
                            )}
                        </div>
                    </div>
                </div>
            </main>
        </div>

        <script is:inline>
            // Tema
            const themeToggle = document.getElementById('themeToggle');
            themeToggle.addEventListener('click', () => {
                if (document.documentElement.classList.contains('dark')) {
                    document.documentElement.classList.remove('dark');
                    localStorage.theme = 'light';
                } else {
                    document.documentElement.classList.add('dark');
                    localStorage.theme = 'dark';
                }
            });

            // Selector de fecha
            document.getElementById('datePicker').addEventListener('change', function(e) {
                window.location.href = `/edit?date=${e.target.value}`;
            });

            // Asegurarse de que el input date sea accesible en todos los dispositivos
            document.getElementById('datePicker').addEventListener('touchstart', function(e) {
                e.preventDefault();
                this.focus();
                if (typeof this.showPicker === 'function') {
                    this.showPicker();
                }
            });

            document.getElementById('datePicker').addEventListener('click', function(e) {
                if (typeof this.showPicker === 'function') {
                    this.showPicker();
                }
            });

            // Cerrar sesión
            window.logout = async function() {
                try {
                    const response = await fetch('/api/logout', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    const data = await response.json();

                    if (!response.ok) {
                        throw new Error(data.message || 'Error al cerrar sesión');
                    }

                    // Esperar a que SweetAlert2 esté cargado
                    if (typeof Swal === 'undefined') {
                        await new Promise(resolve => {
                            const checkSwal = setInterval(() => {
                                if (typeof Swal !== 'undefined') {
                                    clearInterval(checkSwal);
                                    resolve();
                                }
                            }, 100);
                        });
                    }

                    await Swal.fire({
                        title: '¡Hasta pronto!',
                        text: data.message,
                        icon: 'success',
                        confirmButtonColor: '#0ea5e9',
                        background: document.documentElement.classList.contains('dark') ? '#1e293b' : '#ffffff',
                        color: document.documentElement.classList.contains('dark') ? '#f9f9f9' : '#111827',
                        customClass: {
                            confirmButton: 'swal2-confirm-custom'
                        }
                    });

                    // Redirigir a la página principal
                    window.location.href = data.redirect;
                } catch (error) {
                    console.error('Error:', error);
                    if (typeof Swal !== 'undefined') {
                        await Swal.fire({
                            title: 'Error',
                            text: 'Error al cerrar sesión: ' + error.message,
                            icon: 'error',
                            confirmButtonColor: '#ef4444',
                            background: document.documentElement.classList.contains('dark') ? '#1e293b' : '#ffffff',
                            color: document.documentElement.classList.contains('dark') ? '#f9f9f9' : '#111827',
                            customClass: {
                                confirmButton: 'swal2-error-custom'
                            }
                        });
                    } else {
                        alert('Error al cerrar sesión: ' + error.message);
                    }
                }
            };

            // Función para eliminar workout
            window.deleteWorkout = async function(id) {
                // Esperar a que SweetAlert2 esté cargado
                if (typeof Swal === 'undefined') {
                    await new Promise(resolve => {
                        const checkSwal = setInterval(() => {
                            if (typeof Swal !== 'undefined') {
                                clearInterval(checkSwal);
                                resolve();
                            }
                        }, 100);
                    });
                }

                const result = await Swal.fire({
                    title: '¿Estás seguro?',
                    text: "Esta acción no se puede deshacer",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#0ea5e9',
                    cancelButtonColor: '#475569',
                    confirmButtonText: 'Sí, eliminar',
                    cancelButtonText: 'Cancelar',
                    background: document.documentElement.classList.contains('dark') ? '#1e293b' : '#ffffff',
                    color: document.documentElement.classList.contains('dark') ? '#f9f9f9' : '#111827',
                    customClass: {
                        confirmButton: 'swal2-confirm-custom',
                        cancelButton: 'swal2-cancel-custom'
                    }
                });

                if (result.isConfirmed) {
                    await handleDelete(id);
                }
            };

            // Función auxiliar para manejar la eliminación
            async function handleDelete(id) {
                try {
                    console.log('Intentando eliminar entrenamiento con ID:', id);
                    
                    const response = await fetch('/api/deleteWorkout', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ id })
                    });

                    const data = await response.json();
                    console.log('Respuesta del servidor:', data);

                    if (!response.ok) {
                        throw new Error(data.message || 'Error al eliminar el entrenamiento');
                    }

                    // Esperar a que SweetAlert2 esté cargado
                    if (typeof Swal === 'undefined') {
                        await new Promise(resolve => {
                            const checkSwal = setInterval(() => {
                                if (typeof Swal !== 'undefined') {
                                    clearInterval(checkSwal);
                                    resolve();
                                }
                            }, 100);
                        });
                    }

                    await Swal.fire({
                        title: '¡Eliminado!',
                        text: 'El entrenamiento ha sido eliminado correctamente',
                        icon: 'success',
                        confirmButtonColor: '#0ea5e9',
                        background: document.documentElement.classList.contains('dark') ? '#1e293b' : '#ffffff',
                        color: document.documentElement.classList.contains('dark') ? '#f9f9f9' : '#111827',
                        customClass: {
                            confirmButton: 'swal2-confirm-custom'
                        }
                    });
                    
                    // Recargar la página para mostrar los cambios
                    window.location.reload();
                } catch (error) {
                    console.error('Error:', error);
                    if (typeof Swal !== 'undefined') {
                        await Swal.fire({
                            title: 'Error',
                            text: 'Error al eliminar el entrenamiento: ' + error.message,
                            icon: 'error',
                            confirmButtonColor: '#ef4444',
                            background: document.documentElement.classList.contains('dark') ? '#1e293b' : '#ffffff',
                            color: document.documentElement.classList.contains('dark') ? '#f9f9f9' : '#111827',
                            customClass: {
                                confirmButton: 'swal2-error-custom'
                            }
                        });
                    } else {
                        alert('Error al eliminar el entrenamiento: ' + error.message);
                    }
                }
            }

            // Añadir estilos personalizados para SweetAlert2
            const style = document.createElement('style');
            style.textContent = `
                .swal2-confirm-custom {
                    background: linear-gradient(to right, #0ea5e9, #2563eb) !important;
                    border: none !important;
                    box-shadow: 0 4px 6px -1px rgba(14, 165, 233, 0.2) !important;
                    transition: all 0.3s ease !important;
                }
                .swal2-confirm-custom:hover {
                    transform: translateY(-1px) !important;
                    box-shadow: 0 6px 8px -1px rgba(14, 165, 233, 0.3) !important;
                }
                .swal2-cancel-custom {
                    background: linear-gradient(to right, #475569, #334155) !important;
                    border: none !important;
                    box-shadow: 0 4px 6px -1px rgba(71, 85, 105, 0.2) !important;
                    transition: all 0.3s ease !important;
                }
                .swal2-cancel-custom:hover {
                    transform: translateY(-1px) !important;
                    box-shadow: 0 6px 8px -1px rgba(71, 85, 105, 0.3) !important;
                }
                .swal2-error-custom {
                    background: linear-gradient(to right, #ef4444, #dc2626) !important;
                    border: none !important;
                    box-shadow: 0 4px 6px -1px rgba(239, 68, 68, 0.2) !important;
                    transition: all 0.3s ease !important;
                }
                .swal2-error-custom:hover {
                    transform: translateY(-1px) !important;
                    box-shadow: 0 6px 8px -1px rgba(239, 68, 68, 0.3) !important;
                }
            `;
            document.head.appendChild(style);

            // Función para ordenar la tabla
            function sortTable(columnIndex) {
                const table = document.querySelector('table');
                const tbody = table.querySelector('tbody');
                const rows = Array.from(tbody.querySelectorAll('tr'));
                
                rows.sort((a, b) => {
                    const aValue = a.cells[columnIndex].textContent.trim();
                    const bValue = b.cells[columnIndex].textContent.trim();
                    
                    if (columnIndex === 0) { // Fecha
                        return new Date(aValue.split('/').reverse().join('-')) - new Date(bValue.split('/').reverse().join('-'));
                    } else {
                        return aValue.localeCompare(bValue);
                    }
                });
                
                tbody.innerHTML = '';
                rows.forEach(row => tbody.appendChild(row));
            }

            // Función para manejar la completitud de los workouts
            window.toggleWorkoutCompletion = function(checkbox) {
                const workoutId = checkbox.dataset.workoutId;
                const isCompleted = checkbox.checked;
                
                // Obtener el estado actual de localStorage
                let completedWorkouts = JSON.parse(localStorage.getItem('completedWorkouts') || '{}');
                
                // Actualizar el estado para este workout
                completedWorkouts[workoutId] = isCompleted;
                
                // Guardar en localStorage
                localStorage.setItem('completedWorkouts', JSON.stringify(completedWorkouts));
                
                // Actualizar la clase de la fila para mostrar el estado
                const row = checkbox.closest('tr');
                if (isCompleted) {
                    row.classList.add('bg-green-50/50', 'dark:bg-green-900/20');
                } else {
                    row.classList.remove('bg-green-50/50', 'dark:bg-green-900/20');
                }
            };

            // Función para inicializar el estado de los checkboxes
            function initializeWorkoutCompletion() {
                const completedWorkouts = JSON.parse(localStorage.getItem('completedWorkouts') || '{}');
                
                document.querySelectorAll('input[type="checkbox"][data-workout-id]').forEach(checkbox => {
                    const workoutId = checkbox.dataset.workoutId;
                    const isCompleted = completedWorkouts[workoutId] || false;
                    
                    checkbox.checked = isCompleted;
                    
                    const row = checkbox.closest('tr');
                    if (isCompleted) {
                        row.classList.add('bg-green-50/50', 'dark:bg-green-900/20');
                    }
                });
            }

            // Inicializar el estado cuando se carga la página
            document.addEventListener('DOMContentLoaded', function() {
                initializeWorkoutCompletion();
            });
        </script>
    </body>
</html> 