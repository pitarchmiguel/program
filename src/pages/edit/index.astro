---
import { db } from '../../firebase';
import { collection, getDocs, orderBy, query } from 'firebase/firestore';
import { format, parseISO, isSameDay } from 'date-fns';
import { es } from 'date-fns/locale';

let selectedDate = new Date();
let workouts = [];
let isLoading = true;
let error = null;

// Obtener la fecha de la URL si existe
const url = new URL(Astro.request.url);
const dateParam = url.searchParams.get('date');
if (dateParam) {
    selectedDate = parseISO(dateParam);
}

try {
    console.log('Obteniendo lista de workouts...');
    const workoutsCollection = collection(db, "workouts");
    const q = query(workoutsCollection, orderBy("date", "desc"));
    const querySnapshot = await getDocs(q);
    
    console.log('NÃºmero de documentos encontrados:', querySnapshot.size);
    
    workouts = querySnapshot.docs.map(doc => {
        const data = doc.data();
        console.log('Procesando documento:', doc.id, data);
        return {
            id: doc.id,
            date: parseISO(data.date),
            letter: data.letter,
            title: data.title,
            description: data.description?.replace(/<br>/g, '\n') || '',
            notes: data.notes?.replace(/<br>/g, '\n') || ''
        };
    });
    
    console.log('Workouts procesados:', workouts);
} catch (error) {
    console.error('Error al obtener los workouts:', error);
    error = 'Error al cargar los entrenamientos';
} finally {
    isLoading = false;
}

// Filtrar workouts por fecha seleccionada
const selectedDayWorkouts = workouts.filter(workout => 
    isSameDay(workout.date, selectedDate)
);
---

<!DOCTYPE html>
<html lang="es" class="dark">
    <head>
        <meta charset="utf-8" />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta name="generator" content={Astro.generator} />
        <title>Editar Entrenamientos</title>
        <script>
            // Verificar preferencias del sistema y localStorage
            if (localStorage.theme === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
                document.documentElement.classList.add('dark');
            } else {
                document.documentElement.classList.remove('dark');
            }
        </script>
    </head>
    <body class="w-full h-full flex flex-col bg-white dark:bg-[#242424] text-gray-900 dark:text-[#f9f9f9] transition-colors duration-300">
        <div class="w-full h-full my-4 md:my-8 px-4 md:p-6 max-w-4xl mx-auto">
            <div class="flex flex-col md:flex-row md:items-center justify-between gap-4 mb-6 md:mb-8">
                <h1 class="text-2xl md:text-3xl font-bold">Editar Entrenamientos</h1>
                <div class="flex items-center gap-2 md:gap-4">
                    <button 
                        id="themeToggle"
                        class="p-2 rounded-lg bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors duration-300"
                        aria-label="Cambiar tema"
                    >
                        <svg class="w-5 h-5 md:w-6 md:h-6 hidden dark:block" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
                        </svg>
                        <svg class="w-5 h-5 md:w-6 md:h-6 block dark:hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
                        </svg>
                    </button>
                    <input 
                        type="date" 
                        id="datePicker"
                        value={format(selectedDate, 'yyyy-MM-dd')}
                        class="bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-white px-3 md:px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-700 focus:outline-none focus:border-sky-500 transition-colors duration-300 text-sm md:text-base"
                    />
                    <a 
                        href="/add" 
                        class="bg-sky-500 text-white px-3 md:px-4 py-2 rounded-lg hover:bg-sky-600 transition-colors duration-300 text-sm md:text-base"
                    >
                        Nuevo
                    </a>
                </div>
            </div>
            
            {isLoading ? (
                <div class="text-center animate-fade-in">
                    <p class="text-lg md:text-xl text-gray-400 dark:text-gray-500 mb-4">Cargando entrenamientos...</p>
                </div>
            ) : error ? (
                <div class="text-center animate-fade-in">
                    <p class="text-lg md:text-xl text-gray-400 dark:text-gray-500 mb-4">{error}</p>
                </div>
            ) : selectedDayWorkouts.length === 0 ? (
                <div class="text-center py-8 md:py-12 animate-fade-in">
                    <p class="text-xl md:text-2xl text-gray-400 dark:text-gray-500">REST DAY ðŸ¤˜</p>
                </div>
            ) : (
                <div class="space-y-4">
                    {selectedDayWorkouts.map(workout => (
                        <div class="bg-gray-100 dark:bg-gray-800 p-4 md:p-6 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-700 transition-all duration-300 transform hover:scale-[1.02] shadow-sm hover:shadow-md">
                            <div class="flex flex-col md:flex-row md:items-center justify-between gap-4">
                                <div class="flex items-center gap-4">
                                    <span class="text-2xl md:text-3xl font-bold text-sky-500">{workout.letter}</span>
                                    <div>
                                        <h2 class="text-lg md:text-xl font-semibold">{workout.title}</h2>
                                        <p class="text-sm md:text-base text-gray-500 dark:text-gray-400">{format(workout.date, 'dd/MM/yyyy')}</p>
                                    </div>
                                </div>
                                <div class="flex items-center gap-2">
                                    <a 
                                        href={`/edit/${workout.id}`}
                                        class="bg-sky-500 text-white px-3 md:px-4 py-2 rounded-lg hover:bg-sky-600 transition-colors duration-300 text-sm md:text-base"
                                    >
                                        Editar
                                    </a>
                                    <button 
                                        onclick="deleteWorkout('${workout.id}')"
                                        class="bg-red-500 text-white px-3 md:px-4 py-2 rounded-lg hover:bg-red-600 transition-colors duration-300 text-sm md:text-base"
                                    >
                                        Eliminar
                                    </button>
                                </div>
                            </div>
                            <div class="mt-4">
                                <p class="text-sm md:text-base text-gray-700 dark:text-gray-300 whitespace-pre-line">{workout.description}</p>
                                {workout.notes && (
                                    <p class="mt-2 text-sm md:text-base text-gray-500 dark:text-gray-400 whitespace-pre-line">{workout.notes}</p>
                                )}
                            </div>
                        </div>
                    ))}
                </div>
            )}
        </div>

        <script is:inline>
            // Tema
            const themeToggle = document.getElementById('themeToggle');
            themeToggle.addEventListener('click', () => {
                if (document.documentElement.classList.contains('dark')) {
                    document.documentElement.classList.remove('dark');
                    localStorage.theme = 'light';
                } else {
                    document.documentElement.classList.add('dark');
                    localStorage.theme = 'dark';
                }
            });

            // Selector de fecha
            document.getElementById('datePicker').addEventListener('change', function(e) {
                var target = e.target;
                window.location.href = '/edit?date=' + target.value;
            });

            // Eliminar workout
            async function deleteWorkout(id) {
                if (!confirm('Â¿EstÃ¡s seguro de que quieres eliminar este entrenamiento?')) {
                    return;
                }

                try {
                    const response = await fetch(`/api/deleteWorkout`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ id })
                    });

                    if (!response.ok) {
                        throw new Error('Error al eliminar el entrenamiento');
                    }

                    // Recargar la pÃ¡gina para mostrar los cambios
                    window.location.reload();
                } catch (error) {
                    console.error('Error:', error);
                    alert('Error al eliminar el entrenamiento: ' + error.message);
                }
            }
        </script>
    </body>
</html> 