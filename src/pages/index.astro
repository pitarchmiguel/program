---
import { format, startOfWeek, endOfWeek, eachDayOfInterval, addDays, addWeeks, subWeeks, parseISO } from 'date-fns';
import { es } from 'date-fns/locale';

const today = new Date();
const startDate = startOfWeek(today, { weekStartsOn: 1 });
const endDate = addDays(startDate, 4); // Solo 5 d√≠as, de lunes a viernes

const days = eachDayOfInterval({ start: startDate, end: endDate });
---

<html lang="es">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>CrossFit</title>
	</head>
	<body class="w-full min-h-screen flex flex-col items-center bg-gray-100">
		<div class="w-full max-w-4xl bg-white shadow-lg rounded-lg my-1 p-6">
			<div class="flex justify-between items-center mb-6">
				<h1 class="text-2xl font-bold text-gray-800">77Feet Program üèãÔ∏è‚Äç‚ôÄÔ∏è</h1>
				<div class="flex space-x-2">
					<a href="/calendar" class="bg-blue-500 hover:bg-blue-700 text-white font-bold p-2 rounded-full transition duration-300" title="Ver Calendario">
						<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
						</svg>
					</a>
				</div>
			</div>
			
			<div class="flex justify-center items-center mb-6 gap-4">
				<button id="prevWeek" class="text-blue-500 hover:text-blue-700">
					<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
						<path d="M15 18l-6-6 6-6"/>
					</svg>
				</button>
				<h3 id="weekDisplay" class="text-xl font-semibold text-gray-700"></h3>
				<button id="nextWeek" class="text-blue-500 hover:text-blue-700">
					<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
						<path d="M9 18l6-6-6-6"/>
					</svg>
				</button>
			</div>
		
			<div class="grid grid-cols-5 gap-4 mb-6" id="weekGrid">
				{days.map((day) => (
					<div class="flex flex-col items-center p-2 border rounded-lg cursor-pointer hover:bg-gray-100 transition duration-300" data-date={format(day, 'yyyy-MM-dd')}>
						<span class="text-sm font-medium text-gray-500">{format(day, 'EEE', { locale: es })}</span>
						<span class="text-lg font-bold text-gray-700">{format(day, 'd')}</span>
					</div>
				))}
			</div>

			<div id="workoutList" class="space-y-4">
				<!-- Los entrenamientos se cargar√°n aqu√≠ din√°micamente -->
			</div>
		</div>
	</body>
	<style>
		body {
			font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
		}
		.selected-day {
			background-color: #e5e7eb;
			border-color: #3b82f6;
		}
	</style>
	
	<script>
		import { db } from '../firebase';
		import { collection, query, where, getDocs, orderBy } from 'firebase/firestore';
		import { format, startOfWeek, endOfWeek, addWeeks, subWeeks, parseISO, isSameDay, eachDayOfInterval, addDays } from 'date-fns';
		import { es } from 'date-fns/locale';
		
		let currentWeekStart;
		let selectedDate;
		
		function getWeekFromURL() {
			const urlParams = new URLSearchParams(window.location.search);
			const weekParam = urlParams.get('week');
			return weekParam ? parseISO(weekParam) : new Date();
		}
		
		function updateURL(date) {
			const formattedDate = format(date, 'yyyy-MM-dd');
			history.pushState(null, '', `?week=${formattedDate}`);
		}
		
		async function loadWorkouts(start, end) {
			console.log('Cargando entrenamientos para el rango:', format(start, 'yyyy-MM-dd'), 'a', format(end, 'yyyy-MM-dd'));
			const workoutsQuery = query(
				collection(db, "workouts"),
				where("date", ">=", format(start, 'yyyy-MM-dd')),
				where("date", "<=", format(end, 'yyyy-MM-dd')),
				orderBy("date", "asc"),
				orderBy("id", "asc")
			);
		
			const querySnapshot = await getDocs(workoutsQuery);
			const workouts = [];
		
			querySnapshot.forEach((doc) => {
				const data = doc.data();
				workouts.push({
					...data,
					date: parseISO(data.date)
				});
			});
		
			console.log('Entrenamientos cargados:', workouts);
			return workouts;
		}
		
		function displayWorkouts(workouts, selectedDate) {
			console.log('Mostrando entrenamientos para la fecha:', format(selectedDate, 'yyyy-MM-dd'));
			console.log('Todos los entrenamientos:', workouts);
			
			const workoutList = document.getElementById('workoutList');
			workoutList.innerHTML = '';
		
			const filteredWorkouts = workouts.filter(workout => isSameDay(workout.date, selectedDate));
		
			console.log('Entrenamientos filtrados:', filteredWorkouts);
		
			if (filteredWorkouts.length === 0) {
				workoutList.innerHTML = '<p class="text-gray-500">No hay entrenamientos para este d√≠a.</p>';
				return;
			}
		
			filteredWorkouts.forEach(workout => {
				const workoutEl = document.createElement('div');
				workoutEl.className = 'ToggleContent cursor-pointer transition duration-300 ease-in-out hover:bg-gray-100 hover:shadow-xl border border-solid divide-slate-500 p-4 rounded-lg shadow-lg mb-2';
				workoutEl.innerHTML = `
					<h4 class="font-bold">${workout.title}</h4>
					<p class="text-[#6e6e77] hidden mt-2 whitespace-pre-line">${workout.description}</p>
				`;
				workoutList.appendChild(workoutEl);
			});
		
			activeContent();
		}
		
		function activeContent() {
			const toggleContents = document.querySelectorAll(".ToggleContent");
		
			toggleContents.forEach(toggleContent => {
				toggleContent.addEventListener("click", () => {
					const paragraph = toggleContent.querySelector('p');
					if (paragraph) {
						paragraph.classList.toggle('hidden');
					}
				});
			});
		}
		
		function highlightSelectedDay(date) {
			document.querySelectorAll('#weekGrid > div').forEach(dayEl => {
				if (dayEl.dataset.date === format(date, 'yyyy-MM-dd')) {
					dayEl.classList.add('selected-day');
				} else {
					dayEl.classList.remove('selected-day');
				}
			});
		}
		
		async function updateWeekDisplay() {
			const weekEnd = addDays(currentWeekStart, 4); // Asegura que el viernes sea el √∫ltimo d√≠a
			document.getElementById('weekDisplay').textContent = `${format(currentWeekStart, 'd MMM', { locale: es })} - ${format(weekEnd, 'd MMM yyyy', { locale: es })}`;
		
			const workouts = await loadWorkouts(currentWeekStart, weekEnd);
			
			const days = eachDayOfInterval({ start: currentWeekStart, end: weekEnd });
			const dayElements = document.querySelectorAll('#weekGrid > div');
			days.forEach((day, index) => {
				const dayEl = dayElements[index];
				dayEl.dataset.date = format(day, 'yyyy-MM-dd');
				dayEl.querySelector('span:first-child').textContent = format(day, 'EEE', { locale: es });
				dayEl.querySelector('span:last-child').textContent = format(day, 'd');
				
				dayEl.addEventListener('click', () => {
					selectedDate = day;
					highlightSelectedDay(selectedDate);
					displayWorkouts(workouts, selectedDate);
				});
			});
		
			const today = new Date();
			if (today >= currentWeekStart && today <= weekEnd) {
				selectedDate = today;
			} else {
				selectedDate = currentWeekStart;
			}
			highlightSelectedDay(selectedDate);
			displayWorkouts(workouts, selectedDate);
		}
		
		document.getElementById('prevWeek').addEventListener('click', () => {
			currentWeekStart = subWeeks(currentWeekStart, 1);
			updateURL(currentWeekStart);
			updateWeekDisplay();
		});
		
		document.getElementById('nextWeek').addEventListener('click', () => {
			currentWeekStart = addWeeks(currentWeekStart, 1);
			updateURL(currentWeekStart);
			updateWeekDisplay();
		});
		
		document.addEventListener('DOMContentLoaded', () => {
			const urlDate = getWeekFromURL();
			currentWeekStart = startOfWeek(urlDate, { weekStartsOn: 1 });
			updateWeekDisplay();
		});
		</script>
</html>