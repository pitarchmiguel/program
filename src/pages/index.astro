---
import { eachDayOfInterval, addDays, subWeeks, addWeeks, startOfWeek, endOfWeek, format } from 'date-fns';
import Layout from '../layouts/Layout.astro';
import { db } from '../firebase';
import { collection, getDocs, orderBy, query } from 'firebase/firestore';
import { format as dateFnsFormat, parseISO, isSameDay } from 'date-fns';
import { es } from 'date-fns/locale';

const today = new Date();
const startDate = new Date();
const endDate = addDays(startDate, 4); // Solo 5 dÃ­as, de lunes a viernes

const days = eachDayOfInterval({ start: startDate, end: endDate });

let selectedDate = new Date();
let currentWeekStart = startOfWeek(selectedDate, { weekStartsOn: 1 });
let workouts = [];
let isLoading = true;
let error = null;

// Obtener la fecha de la URL si existe
const url = new URL(Astro.request.url);
const dateParam = url.searchParams.get('date');
if (dateParam) {
    selectedDate = parseISO(dateParam);
    currentWeekStart = startOfWeek(selectedDate, { weekStartsOn: 1 });
}

// Generar dÃ­as de la semana
const weekDays = Array.from({ length: 7 }, (_, i) => addDays(currentWeekStart, i));

// AÃ±adir una semana extra antes y despuÃ©s para precarga
const prevWeekStart = subWeeks(currentWeekStart, 1);
const nextWeekStart = addWeeks(currentWeekStart, 1);
const allWeekDays = [
    ...Array.from({ length: 7 }, (_, i) => addDays(prevWeekStart, i)),
    ...weekDays,
    ...Array.from({ length: 7 }, (_, i) => addDays(nextWeekStart, i))
];

// Expandir el rango de fechas para la consulta
const queryStartDate = format(prevWeekStart, 'yyyy-MM-dd');
const queryEndDate = format(addDays(nextWeekStart, 6), 'yyyy-MM-dd');

try {
    console.log('Obteniendo lista de workouts...');
    const workoutsCollection = collection(db, "workouts");
    const q = query(
        workoutsCollection,
        orderBy("date", "desc")
    );
    const querySnapshot = await getDocs(q);
    
    workouts = querySnapshot.docs.map(doc => {
        const data = doc.data();
        return {
            id: doc.id,
            date: parseISO(data.date),
            letter: data.letter,
            title: data.title,
            description: data.description?.replace(/<br>/g, '\n') || '',
            notes: data.notes?.replace(/<br>/g, '\n') || ''
        };
    });
} catch (error) {
    console.error('Error al obtener los workouts:', error);
    error = 'Error al cargar los entrenamientos';
} finally {
    isLoading = false;
}

// Filtrar workouts por fecha seleccionada y ordenar por letra
const selectedDayWorkouts = workouts
    .filter(workout => isSameDay(workout.date, selectedDate))
    .sort((a, b) => a.letter.localeCompare(b.letter));
---

<!DOCTYPE html>
<html lang="es" class="dark">
    <head>
        <meta charset="utf-8" />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta name="generator" content={Astro.generator} />
        <title>La Program</title>
        <script>
            // Verificar preferencias del sistema y localStorage
            if (localStorage.theme === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
                document.documentElement.classList.add('dark');
            } else {
                document.documentElement.classList.remove('dark');
            }
        </script>
        <style is:inline>
            .fade-enter {
                opacity: 0;
                transform: translateY(10px);
            }
            .fade-enter-active {
                opacity: 1;
                transform: translateY(0);
                transition: opacity 300ms ease-in-out, transform 300ms ease-in-out;
            }
            .fade-exit {
                opacity: 1;
                transform: translateY(0);
            }
            .fade-exit-active {
                opacity: 0;
                transform: translateY(-10px);
                transition: opacity 300ms ease-in-out, transform 300ms ease-in-out;
            }
            .page-transition {
                transition: opacity 300ms ease-in-out;
            }
            .page-transition.loading {
                opacity: 0.5;
                pointer-events: none;
            }
        </style>
    </head>
    <body class="w-full h-full flex flex-col bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800 text-gray-900 dark:text-[#f9f9f9] transition-colors duration-300">
        <div id="app" class="w-full h-full my-4 md:my-8 px-4 md:p-6 max-w-4xl mx-auto page-transition">
            {/* NavegaciÃ³n de la semana */}
            <div class="relative overflow-hidden mb-8 bg-white dark:bg-gray-800 rounded-xl shadow-lg p-4">
                <div class="flex justify-between items-center mb-4">
                    <div class="flex items-center">
                        <button id="prevWeek" class="p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors duration-300">
                            <svg class="w-5 h-5 md:w-6 md:h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                            </svg>
                        </button>
                        <span id="currentWeek" class="mx-4 text-base md:text-lg font-semibold">
                            {format(currentWeekStart, 'MMMM yyyy', { locale: es })}
                        </span>
                        <button id="nextWeek" class="p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors duration-300">
                            <svg class="w-5 h-5 md:w-6 md:h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                            </svg>
                        </button>
                    </div>
                    <button 
                        id="themeToggle"
                        class="p-2 rounded-lg bg-white dark:bg-gray-700 shadow-sm hover:shadow-md transition-all duration-300"
                        aria-label="Cambiar tema"
                    >
                        <svg class="w-5 h-5 md:w-6 md:h-6 hidden dark:block" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
                        </svg>
                        <svg class="w-5 h-5 md:w-6 md:h-6 block dark:hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
                        </svg>
                    </button>
                </div>
                <div class="grid grid-cols-7 gap-1 md:gap-2" id="weekNavigation">
                    {weekDays.map((day, index) => (
                        <div 
                            class="flex flex-col items-center justify-center py-2 text-center cursor-pointer"
                            data-date={format(day, 'yyyy-MM-dd')}
                            onclick="handleDateClick(this)"
                        >
                            <div class="text-xs md:text-sm font-medium text-gray-600 dark:text-gray-400">
                                {format(day, 'EEE', { locale: es })}
                            </div>
                            <div class={`w-8 h-8 flex items-center justify-center rounded-full transition-all duration-300 ${
                                isSameDay(day, selectedDate) 
                                    ? 'bg-gradient-to-r from-sky-500 to-blue-600 text-white scale-110 shadow-md' 
                                    : 'hover:bg-gray-100 dark:hover:bg-gray-700'
                            }`}>
                                <span class="text-base md:text-lg font-bold">{format(day, 'd')}</span>
                            </div>
                        </div>
                    ))}
                </div>
            </div>
            
            <div id="workoutsContainer">
                {isLoading ? (
                    <div class="text-center animate-fade-in">
                        <div class="inline-block animate-spin rounded-full h-8 w-8 border-4 border-sky-500 border-t-transparent"></div>
                        <p class="text-lg md:text-xl text-gray-400 dark:text-gray-500 mt-4">Cargando entrenamientos...</p>
                    </div>
                ) : error ? (
                    <div class="text-center animate-fade-in">
                        <p class="text-lg md:text-xl text-red-500 dark:text-red-400 mb-4">{error}</p>
                    </div>
                ) : selectedDayWorkouts.length === 0 ? (
                    <div class="text-center py-12 md:py-16 animate-fade-in">
                        <div class="inline-block p-4 rounded-full bg-gradient-to-r from-sky-500 to-blue-600 text-white mb-4">
                            <svg class="w-12 h-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
                            </svg>
                        </div>
                        <p class="text-2xl md:text-3xl font-bold text-gray-400 dark:text-gray-500">REST DAY ðŸ¤˜</p>
                    </div>
                ) : (
                    <div class="space-y-4">
                        {selectedDayWorkouts.map(workout => (
                            <div class="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-[1.02]">
                                <div class="flex flex-col gap-4">
                                    <div class="flex flex-col gap-4">
                                        <div class="flex items-center justify-between">
                                            <span class="text-2xl md:text-3xl font-bold bg-gradient-to-r from-sky-500 to-blue-600 text-transparent bg-clip-text">{workout.letter}</span>
                                            <button 
                                                class="w-6 h-6 flex items-center justify-center cursor-pointer relative"
                                                data-workout-id={workout.id}
                                                onclick="toggleWorkoutCompletion(this)"
                                            >
                                                <div class="absolute inset-0 rounded-full border-2 border-gray-300 dark:border-gray-600 peer-checked:border-green-500 transition-all duration-300"></div>
                                                <div class="absolute inset-0 bg-green-100/50 dark:bg-green-900/20 rounded-full opacity-0 transition-all duration-300"></div>
                                                <svg 
                                                    class="w-4 h-4 text-green-500 scale-0 transition-transform duration-300 z-10" 
                                                    viewBox="0 0 24 24"
                                                >
                                                    <path fill="currentColor" d="M9 16.2L4.8 12l-1.4 1.4L9 19 21 7l-1.4-1.4L9 16.2z"/>
                                                </svg>
                                            </button>
                                        </div>
                                        <h2 class="text-lg md:text-xl font-semibold">{workout.title}</h2>
                                    </div>
                                </div>
                                <div class="mt-4">
                                    <p class="text-sm md:text-base text-gray-700 dark:text-gray-300 whitespace-pre-line">{workout.description}</p>
                                    {workout.notes && (
                                        <div class="mt-4">
                                            <button 
                                                class="text-sm md:text-base text-sky-500 hover:text-sky-600 dark:text-sky-400 dark:hover:text-sky-300 transition-colors duration-300"
                                                onclick={`toggleNotes('${workout.id}')`}
                                            >
                                                Ver notas
                                            </button>
                                            <div id={`notes-${workout.id}`} class="hidden mt-2 text-sm md:text-base text-gray-700 dark:text-gray-300 whitespace-pre-line">
                                                {workout.notes}
                                            </div>
                                        </div>
                                    )}
                                </div>
                            </div>
                        ))}
                    </div>
                )}
            </div>
        </div>

        <script is:inline>
            // Funciones de utilidad para fechas
            function parseDate(dateStr) {
                if (!dateStr) return new Date();
                const [year, month, day] = dateStr.split('-').map(Number);
                const date = new Date(year, month - 1, day);
                return date;
            }

            function getCurrentDateFromUrl() {
                const params = new URLSearchParams(window.location.search);
                const dateStr = params.get('date');
                return dateStr ? parseDate(dateStr) : new Date();
            }

            function formatDate(date) {
                const year = date.getFullYear();
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const day = String(date.getDate()).padStart(2, '0');
                return `${year}-${month}-${day}`;
            }

            function getStartOfWeek(date) {
                const result = new Date(date);
                const day = result.getDay();
                const diff = result.getDate() - day + (day === 0 ? -6 : 1);
                result.setDate(diff);
                return result;
            }

            function addWeeks(date, weeks) {
                const result = new Date(date);
                result.setDate(result.getDate() + weeks * 7);
                return result;
            }

            function subWeeks(date, weeks) {
                const result = new Date(date);
                result.setDate(result.getDate() - weeks * 7);
                return result;
            }

            function updateWeekDisplay(date) {
                const weekStart = getStartOfWeek(date);
                const month = weekStart.toLocaleString('es', { month: 'long' });
                const year = weekStart.getFullYear();
                currentWeekEl.textContent = `${month} ${year}`;
            }

            // Tema
            const themeToggle = document.getElementById('themeToggle');
            themeToggle.addEventListener('click', () => {
                if (document.documentElement.classList.contains('dark')) {
                    document.documentElement.classList.remove('dark');
                    localStorage.theme = 'light';
                } else {
                    document.documentElement.classList.add('dark');
                    localStorage.theme = 'dark';
                }
            });

            // NavegaciÃ³n de la semana
            const weekNavigation = document.getElementById('weekNavigation');
            const prevWeekBtn = document.getElementById('prevWeek');
            const nextWeekBtn = document.getElementById('nextWeek');
            const currentWeekEl = document.getElementById('currentWeek');
            
            let isNavigating = false;
            const app = document.getElementById('app');
            const workoutsContainer = document.getElementById('workoutsContainer');

            function getWeekDates(date) {
                const monday = new Date(date);
                monday.setDate(date.getDate() - date.getDay() + (date.getDay() === 0 ? -6 : 1));
                
                const dates = [];
                for (let i = 0; i < 7; i++) {
                    const day = new Date(monday);
                    day.setDate(monday.getDate() + i);
                    dates.push(day);
                }
                return dates;
            }

            async function navigateToDate(targetDate) {
                if (isNavigating) return;
                isNavigating = true;
                app.classList.add('loading');

                try {
                    const formattedDate = formatDate(targetDate);
                    const response = await fetch(`/?date=${formattedDate}`);
                    const html = await response.text();
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(html, 'text/html');
                    const newWorkouts = doc.getElementById('workoutsContainer');

                    // Actualizar mes y aÃ±o
                    const month = targetDate.toLocaleString('es', { month: 'long' });
                    const year = targetDate.getFullYear();
                    currentWeekEl.textContent = `${month} ${year}`;

                    // Actualizar selecciÃ³n visual
                    document.querySelectorAll('#weekNavigation > div').forEach(day => {
                        const numberCircle = day.querySelector('div:last-child');
                        if (day.dataset.date === formattedDate) {
                            numberCircle.classList.add('bg-gradient-to-r', 'from-sky-500', 'to-blue-600', 'text-white', 'scale-110', 'shadow-md');
                            numberCircle.classList.remove('hover:bg-gray-100', 'dark:hover:bg-gray-700');
                        } else {
                            numberCircle.classList.remove('bg-gradient-to-r', 'from-sky-500', 'to-blue-600', 'text-white', 'scale-110', 'shadow-md');
                            numberCircle.classList.add('hover:bg-gray-100', 'dark:hover:bg-gray-700');
                        }
                    });

                    // Actualizar contenido y URL
                    if (newWorkouts) {
                        workoutsContainer.classList.add('fade-exit');
                        setTimeout(() => {
                            workoutsContainer.innerHTML = newWorkouts.innerHTML;
                            workoutsContainer.classList.remove('fade-exit');
                            workoutsContainer.classList.add('fade-enter');
                            setTimeout(() => {
                                workoutsContainer.classList.remove('fade-enter');
                                // Actualizar la URL y recargar si es necesario
                                const currentUrl = new URL(window.location.href);
                                const currentDate = currentUrl.searchParams.get('date');
                                if (currentDate !== formattedDate) {
                                    window.location.href = `/?date=${formattedDate}`;
                                }
                            }, 50);
                        }, 300);
                    }
                } catch (error) {
                    console.error('Error al navegar:', error);
                } finally {
                    isNavigating = false;
                    app.classList.remove('loading');
                }
            }

            // NavegaciÃ³n por botones
            prevWeekBtn.addEventListener('click', () => {
                const currentDate = getCurrentDateFromUrl();
                const newDate = new Date(currentDate);
                newDate.setDate(currentDate.getDate() - 7);
                navigateToDate(newDate);
            });

            nextWeekBtn.addEventListener('click', () => {
                const currentDate = getCurrentDateFromUrl();
                const newDate = new Date(currentDate);
                newDate.setDate(currentDate.getDate() + 7);
                navigateToDate(newDate);
            });

            // Click en dÃ­a
            async function handleDateClick(element) {
                const date = parseDate(element.dataset.date);
                navigateToDate(date);
            }

            // Eventos tÃ¡ctiles
            let touchStartX = 0;
            weekNavigation.addEventListener('touchstart', (e) => {
                touchStartX = e.touches[0].clientX;
            });

            weekNavigation.addEventListener('touchend', (e) => {
                const touchEndX = e.changedTouches[0].clientX;
                const swipeDistance = touchEndX - touchStartX;
                
                if (Math.abs(swipeDistance) < 50) return;
                
                const currentDate = getCurrentDateFromUrl();
                const newDate = new Date(currentDate);
                newDate.setDate(currentDate.getDate() + (swipeDistance < 0 ? 7 : -7));
                navigateToDate(newDate);
            });

            // FunciÃ³n para mostrar/ocultar notas
            window.toggleNotes = function(id) {
                const notesEl = document.getElementById(`notes-${id}`);
                if (notesEl.classList.contains('hidden')) {
                    notesEl.classList.remove('hidden');
                } else {
                    notesEl.classList.add('hidden');
                }
            }

            // FunciÃ³n para manejar la completitud de los workouts
            window.toggleWorkoutCompletion = function(button) {
                const workoutId = button.dataset.workoutId;
                const checkIcon = button.querySelector('svg');
                const bgCircle = button.querySelector('div:nth-child(2)');
                const borderCircle = button.querySelector('div:first-child');
                const isCompleted = checkIcon.classList.contains('scale-100');
                
                if (!isCompleted) {
                    checkIcon.classList.remove('scale-0');
                    checkIcon.classList.add('scale-100');
                    bgCircle.classList.remove('opacity-0');
                    bgCircle.classList.add('opacity-100');
                    borderCircle.classList.remove('border-gray-300', 'dark:border-gray-600');
                    borderCircle.classList.add('border-green-500');
                } else {
                    checkIcon.classList.remove('scale-100');
                    checkIcon.classList.add('scale-0');
                    bgCircle.classList.remove('opacity-100');
                    bgCircle.classList.add('opacity-0');
                    borderCircle.classList.remove('border-green-500');
                    borderCircle.classList.add('border-gray-300', 'dark:border-gray-600');
                }
                
                // Obtener el estado actual de localStorage
                let completedWorkouts = JSON.parse(localStorage.getItem('completedWorkouts') || '{}');
                
                // Actualizar el estado para este workout
                completedWorkouts[workoutId] = !isCompleted;
                
                // Guardar en localStorage
                localStorage.setItem('completedWorkouts', JSON.stringify(completedWorkouts));
            };

            // FunciÃ³n para inicializar el estado de los checkboxes
            function initializeWorkoutCompletion() {
                const completedWorkouts = JSON.parse(localStorage.getItem('completedWorkouts') || '{}');
                
                document.querySelectorAll('button[data-workout-id]').forEach(button => {
                    const workoutId = button.dataset.workoutId;
                    const checkIcon = button.querySelector('svg');
                    const bgCircle = button.querySelector('div:nth-child(2)');
                    const borderCircle = button.querySelector('div:first-child');
                    const isCompleted = completedWorkouts[workoutId] || false;
                    
                    if (isCompleted) {
                        checkIcon.classList.remove('scale-0');
                        checkIcon.classList.add('scale-100');
                        bgCircle.classList.remove('opacity-0');
                        bgCircle.classList.add('opacity-100');
                        borderCircle.classList.remove('border-gray-300', 'dark:border-gray-600');
                        borderCircle.classList.add('border-green-500');
                    }
                });
            }

            // Inicializar el estado cuando se carga la pÃ¡gina
            document.addEventListener('DOMContentLoaded', function() {
                initializeWorkoutCompletion();
            });

            // AÃ±adir manejador para el evento popstate
            window.addEventListener('popstate', () => {
                const currentDate = getCurrentDateFromUrl();
                navigateToDate(currentDate);
            });

            // Inicializar la visualizaciÃ³n de la semana actual
            updateWeekDisplay(getCurrentDateFromUrl());
        </script>
    </body>
</html>

<style>
    .scrollbar-hide::-webkit-scrollbar {
        display: none;
    }
    .scrollbar-hide {
        -ms-overflow-style: none;
        scrollbar-width: none;
    }
    .snap-x {
        scroll-snap-type: x mandatory;
    }
    .snap-center {
        scroll-snap-align: center;
    }
</style>